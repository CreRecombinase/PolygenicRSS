wildcard_constraints:
    gn="[0-9a-z]+"
    
GRM_PARTS=4
#Genetic Maps
#ftp://ftp.1000genomes.ebi.ac.uk/vol1/ftp/technical/working/20130507_omni_recombination_rates/
#ftp://ftp-trace.ncbi.nih.gov/1000genomes/ftp/technical/working/20110106_recombination_hotspots/

# File that has the LDetect LD breakpoints
#URL for that file is here #LD_break_file_url="https://bitbucket.org/nygcresearch/ldetect-data/raw/ac125e47bf7ff3e90be31f278a7b6a61daaba0dc/EUR/fourier_ls-all.bed"
        

def mergefunc(wildcards):
    subg=wildcards.ccn.split('-')
    subg= [x.lower() for x in subg]
    [print(x) for x in subg]
    return {'input_vcf': [config["VCF_ODIR"]+ts+"_19.vcf.gz" for ts in subg],
            'input_vcfi': [config["VCF_ODIR"]+ts+"_19.vcf.gz.csi" for ts in subg]}
            

rule vcf_sample_list:
    input:
        inf=config["VCF_ODIR"]+"{ccn}_c_19.vcf.gz"
    output:
        outf=temp("{ccn}_c_sample_l.txt")
    shell:
        "bcftools query -l {input.inf} > {output.outf}"

rule vcf_sample_df:
    input:
        inf="{ccn}_c_sample_l.txt"
    output:
        outf="{ccn}_sample_df.txt"
    script:
        "../scripts/gen_sample_df.R"

rule vcf_sample_num:
    input:
        inf="{ccn}_sample_df.txt"
    params:
        sample_n="{N}"
    output:
        outf="{ccn}_samplesubset_{N}.txt"
    script:
        "../scripts/gen_sample_df_n.R"


rule vcf_subset_n:
    input:
        inf=config["VCF_ODIR"]+"{ccn}_c_19.vcf.gz",
        samplen="{ccn}_samplesubset_{N}.txt"
    output:
        outf=config["VCF_ODIR"]+"{ccn}_{N}_19.vcf.gz"
    threads: 11
    shell:
        "bcftools view {input.inf} -S {input.samplen} -Oz -o {output.outf} --threads {threads}"



rule vcf_merge:
    '''This rule uses the function 'mergefunc' which figures out which WTCCC datasets to merge'''
    input: unpack(mergefunc)
    output:
        out_vcf=config["VCF_ODIR"]+"{ccn}_c_19.vcf.gz"
    threads: 9
    shell:
        "bcftools merge --force-samples {input.input_vcf} --threads {threads} -Ou | bcftools view --genotype \"^miss\" -Oz --threads {threads} -o {output.out_vcf} --types snps --min-af 0.05 --min-ac 1:minor"




rule combine_grm:
    '''This rule concatenates chunked GRMs'''
    input:
        grmfb=expand(config["PLINK_DIR"]+"{{cn}}_19.part_"+str(GRM_PARTS)+"_{p}.grm.bin",p=range(1,GRM_PARTS+1)),
        grmfi=expand(config["PLINK_DIR"]+"{{cn}}_19.part_"+str(GRM_PARTS)+"_{p}.grm.id",p=range(1,GRM_PARTS+1)),
        grmfn=expand(config["PLINK_DIR"]+"{{cn}}_19.part_"+str(GRM_PARTS)+"_{p}.grm.N.bin",p=range(1,GRM_PARTS+1))
    output:
        grmfb=config["PLINK_DIR"]+"{cn}_19.grm.bin",
        grmfi=config["PLINK_DIR"]+"{cn}_19.grm.id",
        grmfn=config["PLINK_DIR"]+"{cn}_19.grm.N.bin"
    shell:
        "cat {input.grmfb} > {output.grmfb}; cat {input.grmfi} > {output.grmfi}; cat {input.grmfn} > {output.grmfn}"



rule grm_combined:
    ''' This rule makes one of the GRM chunks'''
    input:
        in_bed=rules.vcf2plink.output.outf_bed,
        in_bim=rules.vcf2plink.output.outf_bim,
        in_fam=rules.vcf2plink.output.outf_fam
    output:
        grmfb=temp(config["PLINK_DIR"]+"{cn}_19.part_"+str(GRM_PARTS)+"_{p}.grm.bin"),
        grmfi=temp(config["PLINK_DIR"]+"{cn}_19.part_"+str(GRM_PARTS)+"_{p}.grm.id"),
        grmfn=temp(config["PLINK_DIR"]+"{cn}_19.part_"+str(GRM_PARTS)+"_{p}.grm.N.bin")
    params:
        out_p=config["PLINK_DIR"]+"{cn}_19",
        in_p=config["PLINK_DIR"]+"{cn}_19",
        p="{p}"
    threads: 11
    shell:
        "gcta64 --bfile {params.in_p} --make-grm-part "+str(GRM_PARTS)+" {params.p} --thread-num {threads} --out {params.out_p}"
