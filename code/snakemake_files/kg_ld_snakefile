# wget http://hgdownload.soe.ucsc.edu/admin/exe/linux.x86_64/liftOver
# wget http://hgdownload.soe.ucsc.edu/goldenPath/hg18/liftOver/hg18ToHg19.over.chain.gz
# plink --bfile hapmap3_r1_b36_fwd_consensus.qc.poly.recode  --recode --tab --out hapmap3_r1_b36_fwd_consensus.qc.poly.recode
# awk '{print "chr"$1,"\t",$4,"\t",$4+1,"\t",$2}' hapmap3_r1_b36_fwd_consensus.qc.poly.recode.map > hapmap3.hg18.bed
# ./liftOver hapmap3.hg18.bed hg18ToHg19.over.chain.gz hapmap3.hg19.bed unmap
# awk '{print $1,"\t",$4,"\t",0,"\t",$2}' hapmap3.hg19.bed > hapmap3_r1_b37_fwd_consensus.qc.poly.recode.map
# perl -p -i -e 's/chr//g' hapmap3_r1_b37_fwd_consensus.qc.poly.recode.map
# mv hapmap3_r1_b36_fwd_consensus.qc.poly.recode.ped hapmap3_r1_b37_fwd_consensus.qc.poly.recode.ped
# plink --file hapmap3_r1_b37_fwd_consensus.qc.poly.recode --make-bed --out hapmap3_r1_b37_fwd_consensus.qc.poly.recode




rule vcf_2_pop:
    input:
        vcff=config["VCF_DIR"]+"ALL.chr{chr}.phase3_shapeit2_mvncall_integrated_v5a.20130502.genotypes.vcf.gz",
        filt_f="{pop}.samples"
    output:
        vcff=config["VCF_DIR"]+"{pop}/{pop}.chr{chr}.vcf.gz"
    wildcard_constraints:
        pop="[A-Z]+",
        chr="[0-9]+"
    shell:
        "bcftools view {input.vcff} -ghet -a -m2 -M2 -S {input.filt_f} -X -Oz -o {output.vcff} --threads {threads}"

rule pull_pop_list:
    input:
        panel_file=config["INPUT_DIR"]+"integrated_call_samples_v3.20130502.ALL.panel"
    output:
        pop_list="{pop}.samples"
    params:
        pop="{pop}"
    script:
        "../scripts/pop_pull.R"

rule split_inpf:
    input:
        inputf=config["VCF_DIR"]+"snplist/{consortia}/{trait}_{pop}.chr{chrom}.fst",
        ldetectf=config["LDETECT_DIR"]+"fourier_ls-chr{chrom}.bed"
    params:
        chunks=expand("{clusterid}",clusterid=range(1,tot_chunk)),
        useLDetect="{useLDetect}",
        consortia="{consortia}",
        trait="{trait}",
        pop="{pop}",
        chrom="{chrom}"
    output:
        outf_tf=expand(config["VCF_DIR"]+"chunk_snplist/{{consortia}}/{{trait}}_{{pop}}_{{useLDetect}}.chr{{chrom}}.{clusterid}.chunked.fst",clusterid=range(1,tot_chunk))
    script:
        "../scripts/merge_split.R"

rule merge_ld:
    input:
        evdfl=expand(config["EVD_DIR"]+"chr{{chrom}}AF0SNP0N0_{{consortia}}O{{trait}}_{{pop}}_{{useLDetect}}_{{pop}}_{{useLDshrink}}.{rid}.clust.h5",rid=range(1,tot_chunk))
    output:
        evdf=config["EVD_DIR"]+"chr{chrom}AF0SNP0N0_{consortia}O{trait}_{pop}_{useLDetect}_{pop}_{useLDshrink}.h5"
    script:
        "../scripts/merge_evd.R"


rule gen_quh:
    input:
        tinpf=expand(config["EVD_DIR"]+"chr{{chrom}}AF0SNP0N0_{{consortia}}O{{trait}}_{{pop}}_{{useLDetect}}_{{pop}}_{{useLDshrink}}.{rid}.clust.h5",rid=range(1,tot_chunk)),
        evdf=config["EVD_DIR"]+"chr{chrom}AF0SNP0N0_{consortia}O{trait}_{pop}_{useLDetect}_{pop}_{useLDshrink}.h5"
    output:
        quhf=config["KG_DIRECTORY"]+"quh/gwas_chr{chrom}AF0SNP0N0_{consortia}0{trait}_{pop}_{useLDetect}_{pop}_gwas_{useLDshrink}_0.h5"
    script:
        "../scripts/gen_quh_chunk_gwas.R"



rule rssp_est:
    input:
        quhf=expand(config["KG_DIRECTORY"]+"quh/gwas_chr{chrom}AF{{AF}}SNP{{SNPCT}}N{{N}}_{{consortia}}0{{trait}}_{{pop}}_{{useLDetect}}_{{pop}}_gwas_{{useLDshrink}}_0.h5",chrom=genome_chr),
        samp_f=config["KG_DIRECTORY"]+"summary_statistics_fst/{consortia}_{trait}_summary_statistics_sc.txt"
    params:
        doConfound="{useConfounding}",
        pvv="{percentEigen}"
    output:
        dff=temp(config["OUTPUT_DIR"]+"{consortia}/trait_sim_chr1-22AF{AF}SNP{SNPCT}N{N}_{consortia}0{trait}_{pop}_{useLDetect}_{pop}_gwas_RSSp_res_gwas_{percentEigen}_{useLDshrink}_0_{useConfounding}.txt.gz")
    script:
        "../scripts/simple_RSSp.R"

rule dropbox_cp:
    input:
        dff=config["OUTPUT_DIR"]+"{consortia}/trait_sim_chr1-22AF{AF}SNP{SNPCT}N{N}_{consortia}0{trait}_{pop}_{useLDetect}_{pop}_gwas_RSSp_res_gwas_{percentEigen}_{useLDshrink}_0_{useConfounding}.txt.gz"
    output:
        DBox.remote("PolygenicRSS/output/pve/{consortia}/trait_sim_chr1-22AF{AF}SNP{SNPCT}N{N}_{consortia}0{trait}_{pop}_{useLDetect}_{pop}_gwas_RSSp_res_gwas_{percentEigen}_{useLDshrink}_0_{useConfounding}.txt.gz")
    run:
        shell("cp {input} {output}")
