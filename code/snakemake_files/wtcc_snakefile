wildcard_constraints:
    gn="[0-9a-z]+"

rule wtccc_plink_gds:
    ''' This rule converts HDF5 to plink files using SNPrelate'''
    input:
        input_h5=config["WTCC_INPUT_H5"]+"{gn}.h5"
    output:
        outf_snpgds=temp(config["SNPGDS_DIR"]+"{gn}_16_snp_wtcc_geno.gds"),
        outf_fam=temp(config["PLINK_DIR"]+"{gn}_16.fam"),
        outf_bim=temp(config["PLINK_DIR"]+"{gn}_16.bim"),
        outf_bed=temp(config["PLINK_DIR"]+"{gn}_16.bed")
    params:
        outf_pref_plink=config["PLINK_DIR"]+"{gn}_16",
        gn="{gn}"
    resources:
        fh5=1
    script:
        "../scripts/h52tplink.R"


# rule vcf_to_goodplink:
#     ''' This rule makes a plink file from a vcf file'''
#     input:
#         in_vcf=config["VCF_ODIR"]+"{gn}.vcf.gz"
#     output:
#         out_bed=config["PLINK_DIR"]+"{gn}_19.bed",
#         out_bim=config["PLINK_DIR"]+"{gn}_19.bim",
#         out_fam=config["PLINK_DIR"]+"{gn}_19.fam"        
#     params:
#         out_pref_plink=config["PLINK_DIR"]+"{gn}_19"
#     shell:
#         "plink --vcf {input.in_vcf} --make-bed --out {params.out_pref_plink}"        





rule interp_i_map_wtcc:
    ''' This rule reformats the h5 files. No SNPs are filtered (but SNPs are rearranged)'''
    input:
        input_gds=config["GDS_DIR"]+"{cn}_19.gds",
    output:
        outf=config["HDF5_DIR"]+"ALL_{cn}_geno.h5"
    script:
        "../scripts/gds2h5.R"
