wildcard_constraints:
    gn="[0-9a-z]+"

rule wtccc_plink_gds:
    ''' This rule converts HDF5 to plink files using SNPrelate'''
    input:
        input_h5=config["WTCC_INPUT_H5"]+"{gn}.h5"
    output:
        outf_snpgds=temp(config["SNPGDS_DIR"]+"{gn}_17_snp_wtcc_geno.gds"),
        outf_fam=temp(config["PLINK_DIR"]+"{gn}_17.fam"),
        outf_bim=temp(config["PLINK_DIR"]+"{gn}_17.bim"),
        outf_bed=temp(config["PLINK_DIR"]+"{gn}_17.bed")
    params:
        outf_pref_plink=config["PLINK_DIR"]+"{gn}_17",
        gn="{gn}"
    resources:
        fh5=1
    script:
        "../scripts/h52tplink.R"


rule wtccc_vcf_gds:
    ''' This rule converts HDF5 to vcf files using SeqArray'''
    input:
        input_h5=config["WTCC_INPUT_H5"]+"{gn}.h5"
    output:
        outf_snpgds=temp(config["SNPGDS_DIR"]+"{gn}_17_snp_wtcc_geno.gds"),
        outf_vcf=temp(config["WTCC_INPUT_H5"]+"{gn}_17.vcf"),
    params:
        outf_pref_plink=config["PLINK_DIR"]+"{gn}_17",
        gn="{gn}"
    resources:
        fh5=1
    script:
        "../scripts/h52tplink.R"



rule crossover_vcf:
    ''' This rule changes WTCCC coordinates from hg17 (My best guess based on googling rsid numbers) to hg19'''
    input:
        in_vcf=config["WTCC_INPUT_H5"]+"{gn}_17.vcf.gz",
        in_chain="../../data/hg17ToHg19.over.chain.gz",
        in_hg19=config["HG19_DIR"]+"hg19.fa"
    output:
        out_vcf=temp(config["WTCC_INPUT_H5"]+"{gn}_19.vcf")
    conda:
        "envs/ldpred.yml"
    shell:
        "CrossMap.py vcf {input.in_chain} {input.in_vcf} {input.in_hg19} {output.out_vcf}"





rule interp_i_map_wtcc:
    ''' This rule reformats the h5 files. No SNPs are filtered (but SNPs are rearranged)'''
    input:
        input_gds=config["GDS_DIR"]+"{cn}_19.gds",
    output:
        outf=config["HDF5_DIR"]+"ALL_{cn}_geno.h5"
    script:
        "../scripts/gds2h5.R"


rule split_wtccc:
    input:
        h5f=config["WTCC_INPUT_H5"]+"ALL_{cn}_geno.h5"
    params:
        chrom="{chrom}"
    output:
        ohf=config["HDF5_DIR"]+"{cn}/grmi/{cn}.chr{chrom}.h5"
    script:
        "../scripts/split_chr_h5.R"


        # outf=config["HDF5_DIR"]+"ALL_{cn}_geno.h5"
        # input_gds=config["GDS_DIR"]+"{cn}_19.gds",
