bigdata = False
from snakemake.remote.dropbox import RemoteProvider as DropboxRemoteProvider
tokenf=open(".dba.txt").read().replace('\n','')
DBox = DropboxRemoteProvider(oauth2_access_token=tokenf)

include: "param_snakefile"
#include: "grm_snakefile"
include: "intersect_snakefile"
include: "LD_snakefile"
include: "ldsc_snakefile"

include: "wtcc_snakefile"
include: "rssp_snakefile"
include: "sim_snakefile"
include: "trait_snakefile"
import pandas as pd
import numpy as np



#all_traits=[x for x in list(pd.read_csv("UKBB_mf.csv")["Phenotype Code"]) if x is not np.nan]
# with open('../params/ukb_id.txt') as fp:
#     all_ids = [x.strip() for x in fp]
# all_ids=list(set(all_ids))

include: "fram_snakefile"
include: "converters_snakefile"
include: "kg_snakefile"


import math
import numpy as np

import glob
def file_len(fname):
    with open(fname) as f:
        for i, l in enumerate(f):
            pass
    return i


# all_output=DBox.remote(expand("PolygenicRSS/output/pve/{consortia}/trait_sim_chr1-22AF{AF}SNP{SNPCT}N{N}_{consortia}0{trait}_{pop}_{useLDetect}_{pop}_gwas_RSSp_res_gwas_{percentEigen}_{useLDshrink}_0_{mterms}.RDS",
#                   consortia="ukb",
#                   trait=all_ids,
#                   mterms = range(1,5),
#                   pop="EUR",
#                   useLDetect="T",
#                   useLDshrink="T",
#                   percentEigen="0.001",
#                   AF=0,
#                   SNPCT=0,
#                   N=0))


tot_chunk=25



wildcard_constraints:
    clusterid="[0-9]+",
    trait="[a-z0-9-]+",
    chrom="[0-9]+",
    useLDshrink="T|F",
    ncovar="[0-9]"



localrules: all,ukb_dropbox_cp,grmf,gen_merge_f,isnpct,rssp_dropbox_cp

rule all:
    input:
        expand(config["OUTPUT_DIR"]+"ldsc_res/est_chr{chri}_{{pop_a}}_{{pop_b}}_{{scenario}}_{{useLDetect}}_{{geneticMap}}_{{useLDshrink}}_sim_{{ncovar}}_{{useIntercept}}.txt.gz".format(chri=chrom_int),
               pop_a="FRAM",
               pop_b="EUR",
               chri=chrom_int,
               useLDetect="T",
               geneticMap="EUR",
               scenario=SCEN,
               useLDshrink="T",
               ncovar="3",
               useIntercept=["T","F"])

        # DBox.remote(expand("PolygenicRSS/output/{{pop_a}}/{{pop_b}}_{chri}_{{useLDetect}}_{{geneticMap}}_{{scenario}}_{{useLDshrink}}_{{ncovar}}_gwas_RSSp_res_gwas_{{percentEigen}}_{{nterms}}.RDS".format(chri=chrom_int),
        #
