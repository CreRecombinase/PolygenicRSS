include: "param_snakefile"
#include: "wtcc_snakefile"
#include: "combined_snakefile"
#include: "matlab_snakefile"
#include: "crossover_snakefile"
#include: "impute_snakefile"
#include: "manip_snakefile"
#include: "fram_snakefile"
include: "kg_snakefile"
#include: "genred_snakefile"
include: "trait_snakefile"
include: "LD_snakefile"
include: "direct_snakefile"
include: "ldsc_snakefile"
include: "rssp_snakefile"
#include: "grm_snakefile"


wildcard_constraints:
    gn="[0-9a-z]+",
    pop="[A-Z]+"
    

all_ld = [config["EVD_DIR"]+"LD_DF/chr{chrom}/chr{chrom}AF{AF}SNP0N0_{dataset}_{dataset}_F_{dataset}_T_{r2cutoff}_{x}_{y}_10.RDS".format(chrom=19,dataset="CEU",AF="0.01",r2cutoff=0.1,x=x,y=y) for x in range(1,11) for y in range(x,11)]
#flat_list = [item for sublist in l for item in sublist]

use_ld=all_ld[0:4]





localrules: all, phase_chr_prep

rule all:
    input:
        use_ld
        # expand(config["OUTPUT_DIR"]+"sim_chr{chrom}AF{AF}SNP{SNPCT}N{N}_{dataset}_{panel_dataset}_{useLDetect}_{geneticMap}_{simulation}_RSSp_res_{scenario}_{percentEigen}_{useLDshrink}_{useConfounding}.txt.gz",
        #        chrom="1-22",
        #        AF=["0.01","0.05","0.1"],
        #        SNPCT=[0,150000,75000,50000],
        #        N=[0,2000],
        #        simulation=["gwas"],
        #        dataset="cd",
        #        panel_dataset=["bd"],
        #        geneticMap=["omni"],
        #        useLDetect=["T"],
        #        percentEigen=[".1"],
        #        useConfounding="F",
        #        scenario=SCEN,
        #        useLDshrink=["T","F"]),
        # expand(config["OUTPUT_DIR"]+"ldsc_res/sim_chr{chrom}AF{AF}SNP{SNPCT}N{N}_{dataset}_{panel_dataset}_{useLDetect}_{geneticMap}_{simulation}_ldsc_res_{scenario}_{useLDshrink}_{useIntercept}.txt.gz",
        #        chrom="1-22",
        #        AF=["0.01","0.05","0.1"],
        #        SNPCT=[0,150000,75000,50000],
        #        N=[0,2000],
        #        simulation=["gwas"],
        #        dataset="cd",
        #        panel_dataset=["bd"],
        #        geneticMap=["omni"],
        #        useLDetect=["T"],
        #        scenario=SCEN,
        #        useLDshrink=["T","F"],
        #        useIntercept=["F"])


# rule ldsc_rss_report:
#     input:
#         rssprf_gwas=config["OUTPUT_DIR"]+"sim_{snpset}_{dataset}_{panel_dataset}_{useLDetect}_{geneticMap}_gwas_RSSp_res_{scenario}_{pvv}_{useLDshrink}_{cf}_{doSplit}.txt.gz",
#         ldscrf_gwas=config["OUTPUT_DIR"]+"ldsc_res/sim_{snpset}_{dataset}_{panel_dataset}_{useLDetect}_{geneticMap}_gwas_ldsc_res_{scenario}_{useLDshrink}_{doSplit}_{dointer}.txt.gz",
#         betaf=config["KG_DIRECTORY"]+"RSSp_sim_gwas_beta/{snpset}_{dataset}_{panel_dataset}_{scenario}_{doSplit}_beta.h5",
#         quhf_gwas=config["KG_DIRECTORY"]+"RSSp_genome_gwas_quh/{snpset}_{dataset}_{panel_dataset}_{useLDetect}_{geneticMap}_{scenario}_{useLDshrink}_{doSplit}.h5",
#         uhf_gwas=config["KG_DIRECTORY"]+"RSSp_genome_gwas_uh/{snpset}_{dataset}_{panel_dataset}_{scenario}_{doSplit}_sim.h5",
#         evdf=config["EVD_DIR"]+"{snpset}_{dataset}_{panel_dataset}_{useLDetect}_{geneticMap}_{useLDshrink}_{doSplit}.h5"
#     params:
#         snpset="{snpset}",
#         dataset="{dataset}",
#         usesLDetect="{useLDetect}",
#         panel_map="{geneticMap}",
#         jobName="{scenario}",
#         percent_ev="{pvv}",
#         usesLDshrink="{useLDshrink}",
#         ldsc_intercet="{dointer}",
#         confoundingRSS="{cf}"
#     output:
#         reportf="rssp_ldsc_report/{snpset}_{dataset}_{panel_dataset}_{useLDetect}_{geneticMap}_{scenario}_{pvv}_{useLDshrink}_{cf}_{dointer}_{doSplit}.html"
#     script:
#         "../scripts/ldsc_rssp.Rmd"
