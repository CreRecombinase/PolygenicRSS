
rule dl_samples:
    output:
        config["INPUT_DIR"]+"integrated_call_samples_v3.20130502.ALL.panel"
    shell:
        "wget ftp://ftp.1000genomes.ebi.ac.uk/vol1/ftp/release/20130502/integrated_call_samples_v3.20130502.ALL.panel -O {output}"


rule dl_tbi:
    output:
        tbi=config["KG_DIRECTORY"]+"vcf/"+config["KG_VCF_PATH"]+".tbi"
    params:
        chrom="{chrom}"
    shell:
        "wget http://hgdownload.cse.ucsc.edu/gbdb/hg19/1000Genomes/phase3/ALL.chr{params.chrom}.phase3_shapeit2_mvncall_integrated_v5a.20130502.genotypes.vcf.gz.tbi -O {output.tbi}"

rule dl_vcf:
    output:
        vcf=config["KG_DIRECTORY"]+"vcf/"+config["KG_VCF_PATH"]
    params:
        chrom="{chrom}"
    shell:
        "wget http://hgdownload.cse.ucsc.edu/gbdb/hg19/1000Genomes/phase3/ALL.chr{params.chrom}.phase3_shapeit2_mvncall_integrated_v5a.20130502.genotypes.vcf.gz -O {output.vcf}"



rule subsnp_gds:
    ''' Subset SNPs according to which chromosomes you want in the simulation, and what Allele Frequency
 cutoff you want to use (uses gds format)'''
    input:
        gdsf_a=config["GDS_DIR"]+"ALL_{dataset}_geno.gds",
        ldetectf=config["LDETECT_BREAK_FILE"],
        gdsf_b=config["GDS_DIR"]+"ALL_{panel_dataset}_geno.gds"
    params:
        chrom="{chrom}",
        AF="{AF}",
        SNPCT="{SNPCT}",
        N="{N}"
    output:
        outf_a=config["INPUT_DIR"]+"chr{chrom}AF{AF}SNP{SNPCT}N{N}_{dataset}_{panel_dataset}_trait.txt.gz",
        outf_b=config["INPUT_DIR"]+"chr{chrom}AF{AF}SNP{SNPCT}N{N}_{dataset}_{panel_dataset}_LD.txt.gz",
        ldo=config["INPUT_DIR"]+"chr{chrom}AF{AF}SNP{SNPCT}N{N}_{dataset}_{panel_dataset}_LD.RDS",
        gwaso=config["INPUT_DIR"]+"chr{chrom}AF{AF}SNP{SNPCT}N{N}_{dataset}_{panel_dataset}_gwas.RDS"
    script:
        "../scripts/subset_snp_chr_gds.R"


rule kg2gds:
    ''' This rule converts a vcf file to SNPrelate format'''
    input:
        vcff=expand(config["VCF_DIR"]+"{{pop}}.chr{chr}.vcf.gz",chr=range(1,23))
    output:
        temp_gds=config["GDS_DIR"]+"ALL_{pop}_geno.gds"
    wildcard_constraints:
        pop="[A-Z]+"
    threads:
        9
    script:
        "../scripts/vcf2seq_gds.R"

        
rule chkg2gds:
    ''' This rule converts a vcf file to SNPrelate format'''
    input:
        vcff=config["VCF_DIR"]+"{pop}.chr{chr}.vcf.gz",
    output:
        temp_gds=config["GDS_DIR"]+"chr{chr}_{pop}_geno.gds"
    wildcard_constraints:
        pop="[A-Z]+"
    threads:
        9
    script:
        "../scripts/vcf2seq_gds.R"


rule subsetgds:
    ''' This rule subsets a gds file based on AF'''
    input:
        gdsf=config["GDS_DIR"]+"chr{chr}_{pop}_geno.gds",
    output:
        temp_gds=config["GDS_DIR"]+"AF{AF}chr{chr}_{pop}_geno.gds"
    params:
        AF="{AF}"
    wildcard_constraints:
        pop="[A-Z]+"
    threads:
        9
    script:
        "../scripts/seqgds2seq_gds.R"

rule chkggds2h5:
    ''' This rule reformats the h5 files. No SNPs are filtered (but SNPs are possibly rearranged)'''
    input:
        input_gds=config["GDS_DIR"]+"AF{AF}chr{chr}_{pop}_geno.gds"
    output:
        outf=config["HDF5_DIR"]+"AF{AF}chr{chr}_{pop}_geno.h5"
    script:
        "../scripts/gds2h5.R"


rule make_kg_subset_h5:
    input:
        input_file=config["HDF5_DIR"]+"AF{AF}chr{chrom}_{pop}_geno.h5",
        bdf=config["INPUT_DIR"]+"ldetect_{useLDetect}.txt.gz",
        mapf=config["KG_MAPDIR"]+"interpolated_{geneticMap}.h5"
    params:
        useLDetect="{useLDetect}",
        chrom="{chrom}",
        chunk_tot="{chunktot}"
    output:
        output_f=config["INPUT_DIR"]+"AF{AF}chr{chrom}_{pop}_{geneticMap}_{useLDetect}_{chunktot}.h5"
    script:
        "../scripts/subset_ld.R"


rule chunksize_breakpoint:
    params:
        use_ldetect="{chunksize}"
    output:
        bdf=config["INPUT_DIR"]+"ldetect_{chunksize}.txt.gz"
    script:
        "../scripts/break_df.R"

rule ld_chunk_df_h5:
    input:
        input_file=config["HDF5_DIR"]+"AF{AF}chr{chrom}_{pop}_geno.h5",
        subsnpf=config["INPUT_DIR"]+"AF{AF}chr{chrom}_{pop}_{geneticMap}_{useLDetect}_{chunktot}.h5"
    params:
        useLDshrink="{useLDshrink}",
        useLDetect="{useLDetect}",
        r2c="{r2cutoff}",
        pop="{geneticMap}",
        chunk_ind="{x}",
        chunk_tot="{chunktot}"
    output:
        evdf=config["EVD_DIR"]+"{pop}/LD_DF/chr{chrom}/AF{AF}chr{chrom}_{pop}_{useLDetect}_{geneticMap}_{useLDshrink}_{r2cutoff}_{x}_{chunktot}.RDS"
    script:
        "../scripts/ld_df_h5.R"



rule kggds2h5:
    ''' This rule reformats the h5 files. No SNPs are filtered (but SNPs are possibly rearranged)'''
    input:
        input_gds=config["GDS_DIR"]+"ALL_{pop}_geno.gds"
    output:
        outf=config["HDF5_DIR"]+"ALL_{pop}_geno.h5"
    script:
        "../scripts/gds2h5.R"

rule vcf2skh5:
    ''' This rule converts vcfs to HDF5 files using scikit-allel '''
    input:
        config["VCF_DIR"]+"{pop}/{pop}.chr{chrom}.vcf.gz"
    output:
        config["HDF5_DIR"]+"{pop}/{pop}.chr{chrom}.h5"
    run:
        __import__('tables')  # <-- import PyTables; __import__ so that linters don't complain
        import h5py

        # now h5py "supports" blosc

        def blosc_opts(complevel=9, complib='blosc:zstd', shuffle=True):
            shuffle = 2 if shuffle == 'bit' else 1 if shuffle else 0
            compressors = ['blosclz', 'lz4', 'lz4hc', 'snappy', 'zlib', 'zstd']
            complib = ['blosc:' + c for c in compressors].index(complib)
            return (0, 0, 0, 0, complevel, shuffle, complib)


# for writing, do something li
        import allel
        outf=output[0]
        inputf=input[0]
        print(outf+"\n"+inputf)
        allel.vcf_to_hdf5(inputf, outf, compression=32001, compression_opts=blosc_opts(), shuffle=True, overwrite=False, vlen=False,  alt_number=1, fills=None, region=None,  transformers=None, buffer_size=16384, chunk_length=65536, chunk_width=64, log=sys.stdout)
