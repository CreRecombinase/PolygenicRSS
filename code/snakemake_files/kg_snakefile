
rule dl_samples:
    output:
        config["INPUT_DIR"]+"integrated_call_samples_v3.20130502.ALL.panel"
    shell:
        "wget ftp://ftp.1000genomes.ebi.ac.uk/vol1/ftp/release/20130502/integrated_call_samples_v3.20130502.ALL.panel -O {output}"


rule dl_tbi:
    output:
        tbi=config["KG_DIRECTORY"]+"vcf/"+config["KG_VCF_PATH"]+".tbi"
    params:
        chrom="{chrom}"
    shell:
        "wget http://hgdownload.cse.ucsc.edu/gbdb/hg19/1000Genomes/phase3/ALL.chr{params.chrom}.phase3_shapeit2_mvncall_integrated_v5a.20130502.genotypes.vcf.gz.tbi -O {output.tbi}"

rule dl_vcf:
    output:
        vcf=config["KG_DIRECTORY"]+"vcf/"+config["KG_VCF_PATH"]
    params:
        chrom="{chrom}"
    shell:
        "wget http://hgdownload.cse.ucsc.edu/gbdb/hg19/1000Genomes/phase3/ALL.chr{params.chrom}.phase3_shapeit2_mvncall_integrated_v5a.20130502.genotypes.vcf.gz -O {output.vcf}"


rule vcf_2_pop:
    input:
        vcff=config["VCF_DIR"]+"ALL.chr{chr}.phase3_shapeit2_mvncall_integrated_v5a.20130502.genotypes.vcf.gz",
        filt_f="{pop}.samples"
    output:
        vcff=config["VCF_DIR"]+"{pop}/{pop}.chr{chr}.vcf.gz"
    wildcard_constraints:
        pop="[A-Z]+",
        chr="[0-9]+"
    shell:
        "bcftools view {input.vcff} -ghet -a -m2 -M2 -S {input.filt_f} -X -Oz -o {output.vcff} --threads {threads}"

rule pull_pop_list:
    input:
        panel_file=config["INPUT_DIR"]+"integrated_call_samples_v3.20130502.ALL.panel"
    output:
        pop_list="{pop}.samples"
    params:
        pop="{pop}"
    script:
        "../scripts/pop_pull.R"



rule subsnp_gds:
    ''' Subset SNPs according to which chromosomes you want in the simulation, and what Allele Frequency
 cutoff you want to use (uses gds format)'''
    input:
        gdsf_a=config["GDS_DIR"]+"ALL_{dataset}_geno.gds",
        ldetectf=config["LDETECT_BREAK_FILE"],
        gdsf_b=config["GDS_DIR"]+"ALL_{panel_dataset}_geno.gds"
    params:
        chrom="{chrom}",
        AF="{AF}",
        SNPCT="{SNPCT}",
        N="{N}"
    output:
        outf_a=config["INPUT_DIR"]+"chr{chrom}AF{AF}SNP{SNPCT}N{N}_{dataset}_{panel_dataset}_trait.txt.gz",
        outf_b=config["INPUT_DIR"]+"chr{chrom}AF{AF}SNP{SNPCT}N{N}_{dataset}_{panel_dataset}_LD.txt.gz",
        ldo=config["INPUT_DIR"]+"chr{chrom}AF{AF}SNP{SNPCT}N{N}_{dataset}_{panel_dataset}_LD.RDS",
        gwaso=config["INPUT_DIR"]+"chr{chrom}AF{AF}SNP{SNPCT}N{N}_{dataset}_{panel_dataset}_gwas.RDS"
    script:
        "../scripts/subset_snp_chr_gds.R"



rule subsetgds:
    ''' This rule subsets a gds file based on AF'''
    input:
        gdsf=config["GDS_DIR"]+"chr{chr}_{pop}_geno.gds",
    output:
        temp_gds=config["GDS_DIR"]+"AF{AF}chr{chr}_{pop}_geno.gds"
    params:
        AF="{AF}"
    wildcard_constraints:
        pop="[A-Z]+"
    threads:
        9
    script:
        "../scripts/seqgds2seq_gds.R"


rule make_kg_subset_h5:
    input:
        input_file=config["HDF5_DIR"]+"AF{AF}chr{chrom}_{pop}_geno.h5",
        bdf=config["INPUT_DIR"]+"ldetect_{useLDetect}.txt.gz",
        mapf=config["KG_MAPDIR"]+"interpolated_{geneticMap}.h5"
    params:
        useLDetect="{useLDetect}",
        chrom="{chrom}",
        chunk_tot="{chunktot}"
    output:
        output_f=config["INPUT_DIR"]+"AF{AF}chr{chrom}_{pop}_{geneticMap}_{useLDetect}_{chunktot}.h5"
    script:
        "../scripts/subset_ld.R"



rule ld_chunk_df_h5:
    input:
        input_file=config["HDF5_DIR"]+"AF{AF}chr{chrom}_{pop}_geno.h5",
        subsnpf=config["INPUT_DIR"]+"AF{AF}chr{chrom}_{pop}_{geneticMap}_{useLDetect}_{chunktot}.h5"
    params:
        useLDshrink="{useLDshrink}",
        useLDetect="{useLDetect}",
        r2c="{r2cutoff}",
        pop="{geneticMap}",
        chunk_ind="{x}",
        chunk_tot="{chunktot}"
    output:
        evdf=config["EVD_DIR"]+"{pop}/LD_DF/chr{chrom}/AF{AF}chr{chrom}_{pop}_{useLDetect}_{geneticMap}_{useLDshrink}_{r2cutoff}_{x}_{chunktot}.RDS"
    script:
        "../scripts/ld_df_h5.R"



rule kggds2h5:
    ''' This rule reformats the h5 files. No SNPs are filtered (but SNPs are possibly rearranged)'''
    input:
        input_gds=config["GDS_DIR"]+"ALL_{pop}_geno.gds"
    output:
        outf=config["HDF5_DIR"]+"ALL_{pop}_geno.h5"
    script:
        "../scripts/gds2h5.R"

