include: "../parameter_generation/Snakefile"
gardner_dir="../../../../../../../../group/xhe-lab/1KG/"
rcc_dir="../../../../../../../project/xinhe/eQTL/1kg/"
if os.path.exists(gardner_dir):
    configpath="../workflow_params_gardner.json"
else:
    if os.path.exists(rcc_dir):
        configpath="../workflow_params_rcc.json"
    else:
        if os.path.exists("../../../../Desktop/im_xps13"):
            configpath="../workflow_params_xps.json"
        else:
            configpath="../workflow_params.json"    
    
configfile:
    configpath    

shell.executable("/bin/bash")

config = {key: "../"+value for (key,value) in config.items()}   



rule all:
    input:
        expand(config["HDF5_DIR"]+"{gn}_hapmap_wtcc_geno.h5",gn=GWAS_NAMES),
        expand(config["VCF_ODIR"]+"{gn}_19.vcf.gz",gn=GWAS_NAMES)
#        expand(WTCC_INPUT_DIR+"{trait}.h5",trait=GWAS_NAMES)
        # expand(config["HDF5_DIR"]+"{gn}_seq_hapmap_geno.h5",gn=GWAS_NAMES)

#RsMergeArch url       
#ftp://ftp.ncbi.nlm.nih.gov/snp/organisms/human_9606/database/data/organism_data/RsMergeArch.bcp.gz



rule repack_wtcc:
    ''' This rule repacks the gzipped HDF5 files using the blosc filter so that they can more quickly be read and written'''
    input:
        inf=config["WTCC_INPUT_H5"]+"{gn}.mat"
    output:
        outf=config["WTCC_INPUT_H5"]+"{gn}_16.h5"
    shell:
        "/usr/local/bin/h5repack -f UD=32001,2,4,8 {input.inf} {output.outf}"
        

rule wtccc_plink_gds:
    ''' This rule converts HDF5 to plink files using SNPrelate'''
    input:
        input_h5=config["WTCC_INPUT_H5"]+"{gn}_16.h5"
    output:
        outf_snpgds=temp(config["SNPGDS_DIR"]+"{gn}_16_snp_wtcc_geno.gds"),
        outf_fam=temp(config["PLINK_DIR"]+"{gn}_16.fam"),
        outf_bim=temp(config["PLINK_DIR"]+"{gn}_16.bim"),
        outf_bed=temp(config["PLINK_DIR"]+"{gn}_16.bed")
    params:
        outf_pref_plink=config["PLINK_DIR"]+"{gn}_16",
        gn="{gn}"
    script:
        "../../scripts/h52tplink.R"

rule badplink_to_vcf:
    input:
        in_bed=rules.wtccc_plink_gds.output.outf_bed,
        in_bim=rules.wtccc_plink_gds.output.outf_bim,
        in_fam=rules.wtccc_plink_gds.output.outf_fam
    params:
        in_pref_plink=config["PLINK_DIR"]+"{gn}_16",
        out_pref_vcf=config["VCF_ODIR"]+"{gn}_16"
    output:
        out_vcf=temp(config["VCF_ODIR"]+"{gn}_16.vcf.gz"),
        out_vcf_nsx=temp(config["VCF_ODIR"]+"{gn}_16.nosex"),
        out_vcf_lg=temp(config["VCF_ODIR"]+"{gn}_16.log")
    threads: 11
    shell:
        "plink --bfile {params.in_pref_plink} --recode vcf bgz --out {params.out_pref_vcf} --threads {threads}"
        
rule gds_19:
    input:
        vcff=config["VCF_ODIR"]+"{gn}_19.vcf.gz"
    output:
        temp_gds=config["GDS_DIR"]+"{gn}_19.gds"
    threads: 9
    script:
        "../../scripts/vcf2seq_gds.R"
    
rule crossover_vcf:
    input:
        in_vcf=config["VCF_ODIR"]+"{gn}_16.vcf.gz",
        in_chain="../../../data/hg16ToHg19.over.chain.gz",
        in_hg19=config["HG19_DIR"]+"hg19.fa"
    output:
        out_vcf=temp(config["VCF_ODIR"]+"{gn}_19.vcf")
    conda:
        "envs/ldpred.yml"
    shell:
        "CrossMap.py vcf {input.in_chain} {input.in_vcf} {input.in_hg19} {output.out_vcf}"



rule vcf_id2x:
    input:
        config["VCF_ODIR"]+"{gn}_19.vcf"
    output:
        vcfi=config["VCF_ODIR"]+"{gn}_19.vcf.gz"
    threads: 9
    shell:
        "cat {input} | vcf-sort -c -p {threads} | bgzip > {output.vcfi}"


rule vcf_idx:
    input:
        config["VCF_ODIR"]+"{gn}_19.vcf.gz"
    output:
        config["VCF_ODIR"]+"{gn}_19.vcf.gz.csi"
    threads: 9
    shell:
        "bcftools index {input}"

        
rule vcf_to_goodplink:
    input:
        in_vcf=config["VCF_ODIR"]+"{gn}.vcf.gz"
    output:
        out_bed=config["PLINK_DIR"]+"{gn}_19.bed",
        out_bim=config["PLINK_DIR"]+"{gn}_19.bim",
        out_fam=config["PLINK_DIR"]+"{gn}_19.fam"        
    params:
        out_pref_plink=config["PLINK_DIR"]+"{gn}_19"
    shell:
        "plink --vcf {input.in_vcf} --make-bed --out {params.out_pref_plink}"        




rule interp_map_wtcc:
    ''' This rule reformats the h5 files. No SNPs are filtered (but SNPs are rearranged)'''
    input:
        input_gds=config["GDS_DIR"]+"{gn}_19.gds"
#        mapf=KG_MAPDIR+"interpolated_{map}.h5"
    output:
        outf=config["HDF5_DIR"]+"{gn}_seq_wtcc_geno.h5"
    script:
        "../../scripts/gds2h5.R"        

