#+TITLE: UK Biobank Simulation
#+SETUPFILE: setup.org


* Before starting with the UK biobank simulation I'm going to work with the DGN data

** Steps that are needed before we can simulate
   
*** Decide on a set of SNPs

The analysis can only be done on the intersection of the GWAS SNPs and the reference panel SNPs.  We do not have a 
way of accounting for missing data.  When we do simulations we can either account for this or not.  For now I'm going to only simulate
causal SNPs at the intersecton of the target and reference panel.  

This creates another problem though. The in-sample vs out of sample reference LD panel comparison is confounded by a difference in the number
of SNPs (There is perfect correspondence between a dataset and itself).




#+BEGIN_SRC R 
  library(ldmap)
  library(EigenH5)
  library(dplyr)

  snp_h5 <- "/run/media/nwknoblauch/Data/dbsnp/hg19/snp151.h5"
  dgn_bim <- "/run/media/nwknoblauch/Data/DGN/PED/GenRED.case.autosomal.FINAL.forward.strand.bim"

  dgn_new_d <- "/run/media/nwknoblauch/Data/DGN/PED/hg19/"
  dgn_new_bim <- fs::path(dgn_new_d,"GenRED.case.hg19.bim")


  bim_df <- read_plink_bim(dgn_bim) %>%
    mutate(rsid=rsid2int(rsid),osnp_id=1:n())

  fam_df <- read_plink_fam(dgn_bim)
  write_plink_fam(fam_df, dgn_new_bim)

  co_df <- read_df_h5(snp_h5, "chrom_offset")
  N <- nrow(fam_df)


  rewrite_plink <- function(h5f,match_df,offset_df=NULL){
    schrom_df <- mutate(match_df, chrom = chromosomes(snp_struct)) %>%
      distinct(chrom)
    if(is.null(offset_df)){
      offset_df <- read_df_h5(h5f,"chrom_offset")
    }
    offset_df <- semi_join(offset_df,schrom_df,by="chrom")
    bidf <- inner_join(match_df,pmap_dfr(offset_df,function(chrom,offset,datasize,...){
      subset_seq = seq(from=offset+1,length.out=datasize)
      read_df_h5(h5f,
                 "snp", subcols = c("rsid","pos","ref","alt"),
                 subset=subset_seq) %>%
        transmute(rsid=rsid,
                  new_snp=new_ldmap_snp(chrom,pos,as_ldmap_allele(ref),as_ldmap_allele(alt)))
    }),by="rsid") %>% select(-snp_struct)  %>% distinct(rsid,.keep_all=TRUE) %>% arrange(new_snp)
    ngl <- read_plink_bed(dgn_bim,N=N,subset=bidf$osnp_id)
    write_plink_bed(ngl,dgn_new_bim,append=TRUE)
    write_plink_bim(bidf,dgn_new_bim,append=TRUE)
  }

  split(bim_df,chromosomes(bim_df$snp_struct)) %>% walk(~rewrite_plink(snp_h5,.,offset_df=co_df))

  nbim_df <- read_plink_bim(dgn_new_bim) %>%
    mutate(rsid=rsid2int(rsid),snp_id=1:n())


  split(nbim_df,chromosomes(nbim_df$snp_struct)) %>% walk(function(tbdf){
    new_path <- fs::path(
                      fs::path_dir(dgn_new_bim),
                      paste0("chr",unique(chromosomes(tbdf$snp_struct))))
    rgl <- read_plink_bed(dgn_new_bim,N=N,subset=tbdf$snp_id)
    write_plink_bim(tbdf,new_path)
    write_plink_fam(fam_df,new_path)
    write_plink_bed(rgl,new_path)
    })
#+END_SRC




* UK Biobank simulations

#+BEGIN_SRC snakemake :tangle ../workflow/ukb_snakefile
  rule nodup_snplist:
      input:
          bimf = config_d["UKB_BGEN"] + "ukb_mfi_chr{chrom}_v3.txt.gz"
      params:
          host = host
      output:
          snplistf = config_d["SNPLIST_D"]+"chr{chrom}_01.txt"
      script:
          "../scripts/uniq_bim.R"
#+END_SRC

#+begin_src R :tangle ../scripts/uniq_bim.R

      library(ldmap)
      library(dplyr)
      library(purrr)
      library(readr)
      library(vroom)
      input_f <- snakemake@input[["bimf"]]
      output_f <- snakemake@output[["snplistf"]]
      host <- snakemake@params[["host"]] %||% "gardner"
      has_chr <- as.logical(snakemake@params[["has_chr"]] %||% FALSE)

      col_chromosome <- function (prefix_chr = TRUE, ...) 
      {
        if (prefix_chr) {
          return(vroom::col_factor(levels = ldmap:::chromosome_levels(TRUE)))
        }
        return(vroom::col_factor(levels = ldmap:::chromosome_levels(FALSE)))
      }


      bim_cols <- function (chrom = col_chromosome(prefix_chr = TRUE), rsid = vroom::col_character(), 
                            map = vroom::col_double(), pos = vroom::col_integer(), alt = vroom::col_character(), 
                            ref = vroom::col_character(), ...) 
      {
        return(vroom::cols(chrom = chrom, rsid = rsid, map = map, 
                           pos = pos, alt = alt, ref = ref))
      }


      if(host!="gardner"){

      rpb <- function(file, compact = TRUE,has_chr=FALSE, cols = bim_cols(chrom=col_chromosome(has_chr)),read_fun=vroom::vroom) {
        ret_df <- dplyr::filter(vroom(file, col_names = names(cols$cols),col_types=cols,delim="\t"),nchar(alt)==1,nchar(ref)==1)
        if (compact)
          return(compact_snp_struct(ret_df))
        return(ret_df)
      }



            walk2(input_f, output_f,
                  function(input,output){
                    rpb(input,has_chr=has_chr) %>%
                      count(rsid) %>%
                      filter(n==1) %>%
                      pull(rsid) %>% 
                      write_lines(output)
                  })
      }else{
        input_df <- vroom::vroom(input_f,delim="\t",col_names=FALSE)
        ctp <- count(input_df,X3)
        sct <- semi_join(input_df,
                           filter(ctp,n==1))
        sct_snp <- sct %>% filter(nchar(X4)==1,
                                  nchar(X5)==1)
        filter(sct_snp,
               X6>0.01) %>% pull(X2) %>% write_lines(output_f)
        }
#+end_src

#+RESULTS:


#+BEGIN_SRC snakemake :tangle ../workflow/ukb_snakefile
    rule index_bgen:
        input:
            ukb_bgen = ancient(config_d["UKB_BGEN"] + "ukb_imp_chr{chrom}_v3.bgen")
        output:
            config_d["UKB_BGEN"] + "ukb_imp_chr{chrom}_v3.bgen.bgi"
        shell:
            "/gpfs/data/xhe-lab/software/spack/opt/spack/linux-rhel6-haswell/gcc-9.2.0/bgen-default-f3kwhoklsgjdeojgjjzt6g4d5bqqmttt/bin/bgenix -g {input.ukb_bgen} -index -clobber"

    rule index_ss_bgen:
        input:
            ukb_bgen = config_d["UKB_PED"]+"chr{chrom}_"+config_d["SAMPLEN"]+"_01.bgen"
        output:
            config_d["UKB_PED"]+"chr{chrom}_"+config_d["SAMPLEN"]+"_01.bgen.bgi"
        shell:
            "/gpfs/data/xhe-lab/software/spack/opt/spack/linux-rhel6-haswell/gcc-9.2.0/bgen-default-f3kwhoklsgjdeojgjjzt6g4d5bqqmttt/bin/bgenix -g {input.ukb_bgen} -index -clobber"

    rule index_ss_bgen2:
        input:
            ukb_bgen = config_d["UKB_PED"]+"{ps}/chr{chrom}_"+config_d["SAMPLEN"]+"_01.bgen"
        output:
            config_d["UKB_PED"]+"{ps}/chr{chrom}_"+config_d["SAMPLEN"]+"_01.bgen.bgi"
        shell:
            "/gpfs/data/xhe-lab/software/spack/opt/spack/linux-rhel6-haswell/gcc-9.2.0/bgen-default-f3kwhoklsgjdeojgjjzt6g4d5bqqmttt/bin/bgenix -g {input.ukb_bgen} -index -clobber"

    rule index_ss_bgen3:
        input:
            ukb_bgen = config_d["UKB_PED"]+"{ps}/chr{chrom}_"+config_d["SAMPLEN"]+".bgen"
        output:
            config_d["UKB_PED"]+"{ps}/chr{chrom}_"+config_d["SAMPLEN"]+".bgen.bgi"
        shell:
            "/gpfs/data/xhe-lab/software/spack/opt/spack/linux-rhel6-haswell/gcc-9.2.0/bgen-default-f3kwhoklsgjdeojgjjzt6g4d5bqqmttt/bin/bgenix -g {input.ukb_bgen} -index -clobber"

    rule ss_bgenix:
        input:
            ukb_bgen = ancient(config_d["UKB_BGEN"] + "ukb_imp_chr{chrom}_v3.bgen"),
            snplistf = config_d["SNPLIST_D"]+"chr{chrom}_01.txt"
        output:
            target_bgen = config_d["SNPLIST_D"]+"chr{chrom}_01.bgen"
        shell:
            "/gpfs/data/xhe-lab/software/spack/opt/spack/linux-rhel6-haswell/gcc-9.2.0/bgen-default-f3kwhoklsgjdeojgjjzt6g4d5bqqmttt/bin/bgenix -g {input.ukb_bgen} -incl-rsids {input.snplistf} > {output.target_bgen}"


    rule sub_bgen_idx:
        input:
            bgen = config_d["SNPLIST_D"]+"chr{chrom}_01.bgen"
        output:
            config_d["SNPLIST_D"]+"chr{chrom}_01.bgen.bgi"
        shell:
            "/gpfs/data/xhe-lab/software/spack/opt/spack/linux-rhel6-haswell/gcc-9.2.0/bgen-default-f3kwhoklsgjdeojgjjzt6g4d5bqqmttt/bin/bgenix -g {input} -index -clobber"


    rule independent_variants_bgi:
        input:
            a_dbf = expand(config_d["UKB_PED"]+"{{ps}}/chr{chrom}_"+config_d["SAMPLEN"]+".bgen.bgi",chrom=genome_chr)
        output:
            singlef = config_d["UKB_PED"]+"{ps}/uniq_vars_"+config_d["SAMPLEN"]+".txt"
        script:
            "../scripts/ind_vars_db.R"
        
#+END_SRC

#+begin_src R :tangle ../scripts/bgen2h5.R
   library(ldmap)
   library(EigenH5)
   library(rbgen)
   library(dplyr)
   input_f <- snakemake@input[["bgen"]]
   output_f <- snakemake@output[["h5"]]
   ldmr <- snakemake@params[["ldmr"]]
   ldid <- ldetect_EUR[ldmr]
   new_name <- magrittr::set_names(ldmap:::chromosome_levels(),stringr::str_pad(as.character(1:24),2,pad="0"))


   
   range_df <- tibble(ldmr=ldid) %>% explode_ldmap_region() %>% transmute(chromosome=as.character(fct_recode(chrom,!!!new_name)),start,end)
   data_r <- bgen.load(input_f,range_df)
#+end_src

#+begin_src R :tangle ../scripts/ind_vars_db.R
  library(dplyr)
  library(RSQLite)
  library(dbplyr)
  input_dbf <- snakemake@input[["a_dbf"]]


  all_rsids_uniq <- unlist(purrr::map(input_dbf,function(tdbf){

  con <- DBI::dbConnect(RSQLite::SQLite(), dbname = tdbf,flags=RSQLite::SQLITE_RO)

    var_db <- tbl(con, "Variant")
    uniq_rsid <- count(var_db,rsid) %>% filter(n==1) %>% select(rsid) %>% collect() %>% pull(1)
    DBI::dbDisconnect(con)
    return(uniq_rsid)
  }),use.names=FALSE)

  if(sum(duplicated(all_rsids_uniq))>0){
    all_rsids_uniq <- tibble(rsid=all_rsids_uniq) %>% filter(n==1) %>% select(rsid)  %>% pull(1)
  }

  tibble(rsid=all_rsids_uniq) %>% readr::write_tsv(snakemake@output[["singlef"]], col_names=FALSE)
#+END_SRC

#+BEGIN_SRC snakemake :tangle ../workflow/ukb_snakefile
  rule tbgen2bgen:
      input:
          bgen = config_d["SNPLIST_D"]+"chr{chrom}_01.bgen",
          bgf="splitted/chr{chrom}_{scatteritem}.txt",
          samplef= config_d["UKB_SAMPLE"],
          singlef = config_d["GWAS"]+"grm_cut/{ps}_"+config_d["SAMPLEN"]+".txt"
      output:
          bgenf = temp(config_d["UKB_PED"]+"{ps}/chr{chrom}_01_"+config_d["SAMPLEN"]+"_tmp_{scatteritem}.bgen")
      threads: 1
      shell:
          config_d["BGENIXCMD"]+" -g {input.bgen} -incl-range {input.bgf} | "+config_d["QCTCMD"]+" -g - -s {input.samplef} -incl-samples <(cut -f 1 {input.singlef}) -filetype bgen -bgen-bits 8 -og {output.bgenf} -bgen-compression zstd -threads {threads}"

  rule cbgen2bgen:
      input:
          expand(config_d["UKB_PED"]+"{{ps}}/chr{{chrom}}_01_"+config_d["SAMPLEN"]+"_tmp_{scatteritem}.bgen",scatteritem=range(24))
      output:
          config_d["UKB_PED"]+"{ps}/chr{chrom}_"+config_d["SAMPLEN"]+".bgen"
      shell:
          "/gpfs/data/xhe-lab/software/spack/opt/spack/linux-rhel6-haswell/gcc-9.2.0/bgen-default-f3kwhoklsgjdeojgjjzt6g4d5bqqmttt/bin/cat-bgen -g {input} -og {output}"


  rule gen_sample_bgen:
      input:
          inpf=config_d["UKB_PED"]+"{ps}/chr{chrom}_"+config_d["SAMPLEN"]+".bgen"
      output:
          onpf=temp(config_d["UKB_PED"]+"{ps}/chr{chrom}_"+config_d["SAMPLEN"]+".temp_sample")
      shell:
          config_d["QCTCMD"]+" -g {input.inpf} -os {output.onpf}"
        
  rule rgen_sample_bgen:
      input:
          onpf=config_d["UKB_PED"]+"{ps}/chr{chrom}_"+config_d["SAMPLEN"]+".temp_sample",
          samplef= config_d["UKB_SAMPLE"],
      output:
          onpf=config_d["UKB_PED"]+"{ps}/chr{chrom}_"+config_d["SAMPLEN"]+".sample"
      script:
          "../scripts/add_sex.R"


#+END_SRC

#+begin_src R :tangle ../scripts/add_sex.R
  library(dplyr)
  library(readr)
  read_delim(snakemake@input[["onpf"]], delim=" ") %>% 
    inner_join(read_delim(snakemake@input[["samplef"]], delim=" ")) %>%
    write_delim(snakemake@output[["onpf"]], delim=" ")


#+END_SRC



#+BEGIN_SRC snakemake :tangle ../workflow/ukb_snakefile

  rule bgensplit_inp:
      input:
          bgen = config_d["SNPLIST_D"]+"chr{chrom}_01.bgen"
      params:
          chrom="{chrom}"
            
      output:
          ldmap_rs=expand("splitted/chr{{chrom}}_{scatteritem}.txt",scatteritem=range(24))
      script:
          "../scripts/bgen_zlib2zstd_input.R"


#+END_SRC

#+begin_src R :tangle ../scripts/bgen_zlib2zstd_input.R
  library(ldmap)
  library(stringr)
  library(purrr)

  chunk2 <- function(x,n) split(x, cut(seq_along(x), n, labels = FALSE))
  output_f <- snakemake@output[["ldmap_rs"]]
  num_chunks <- length(output_f)
  chromosome <- as.integer(snakemake@params[["chrom"]])
  num_c  <- ldetect_EUR
  chrom_name <- stringr::str_pad(as.character(chromosome),2,pad="0")
  lds <- split(ldetect_EUR,chromosomes(ldetect_EUR))

  stopifnot(min(lengths(lds))>=num_chunks)

  sub_ld <- lds[[chromosome]]
  ret_vec <- map_chr(chunk2(sub_ld,num_chunks),function(x){
    cvh <- convex_hull(x)
    paste0(chrom_name,":",starts(cvh),"-",ends(cvh))
  })

  walk2(output_f,ret_vec,function(outf,rv){
    readr::write_lines(rv,outf)
    })
#+END_SRC

#+begin_src R :tangle ../scripts/gds2bgen.R
   library(SeqArray)
   library(gds2bgen)
   library(BiocParallel)
   input_f <- snakemake@input[["bgen"]]
   output_f <- snakemake@output[["gds"]]
   worker <- snakemake@threads

   #worker <- BatchtoolsParam(workers=worker_n,cluster="torque", template="/home/t.cri.nknoblauch/torque_batchtools.tmpl",resources=list(walltime = 36000L,memory=8000))
   seqBGEN2GDS(input_f,output_f,storage.option="LZ4_RA",float.type="packed8",geno=TRUE,dosage=FALSE,prob=FALSE,parallel=worker)

#+END_SRC

#+RESULTS:


#+BEGIN_SRC snakemake :tangle ../workflow/ukb_snakefile

  # #
  # #target_bgen = config_d["UKB_BGEN"] + "ukb_imp_chr{chrom}_v3.bgen",
  # rule subset_bgen_qctool:
  #     input:
  #         target_bgen = config_d["SNPLIST_D"]+"chr{chrom}_01_zstd.bgen",
  #         samplef= config_d["UKB_SAMPLE"],
  #         singlef=config_d["GWAS"]+"grm_cut/{ps}_"+config_d["SAMPLEN"]+".txt"
  #     params:
  #         bgen = config_d["UKB_PED"]+"{ps}/chr{chrom}_"+config_d["SAMPLEN"]
  #     output:
  #         target_bgen = config_d["UKB_PED"]+"{ps}/chr{chrom}_"+config_d["SAMPLEN"]+".bgen",
  #         target_ss = config_d["UKB_PED"]+"{ps}/chr{chrom}_"+config_d["SAMPLEN"]+".sumstats",
  #         target_sample = config_d["UKB_PED"]+"{ps}/chr{chrom}_"+config_d["SAMPLEN"]+".sample"
  #     threads: 12
  #     shell:
  #         config_d["QCTCMD"]+" -g {input.target_bgen}  -incl-samples <(cut -f 1 {input.singlef}) -og {output.target_bgen} -os {output.target_sample} -snp-stats -osnp {output.target_ss} -bgen-compression \"zstd\" -threads {threads}"


  # rule subset_bgen_bgen:
  #     input:
  #         ukb_bgen = config_d["UKB_PED"]+"chr{chrom}_"+config_d["SAMPLEN"]+".bgen",
  #         samplen = config_d["UKB_PED"]+"chr{chrom}_"+config_d["SAMPLEN"]+".sample"
  #     params:
  #         op = "chr{chrom}_"+config_d["SAMPLEN"]+"_01",
  #         bgen = config_d["UKB_PED"]+"chr{chrom}_"+config_d["SAMPLEN"]+"_01"
  #     output:
  #         target_bgen = config_d["UKB_PED"]+"chr{chrom}_"+config_d["SAMPLEN"]+"_01.bgen"
  #     threads: 4
  #     shell:
  #         "/gpfs/data/xhe-lab/software/spack/opt/spack/linux-rhel6-haswell/gcc-9.2.0/plink2-master-cy4i77vbnkwgzpc56eaghkq27shwgcam/bin/plink2 --bgen {input.ukb_bgen} ref-first --maf 0.01  --export bgen-1.3 --out {output.target_bgen} --threads {threads}"


  rule make_bfile_list:
      input:
          bgf=expand(config_d["UKB_PED"]+"{{ps}}/chr{chrom}_"+config_d["SAMPLEN"]+".bgen",chrom=genome_chr)
      params:
          gch=genome_chr
      output:
          output_f=temp("{ps}/file_list.txt")
      run:
          with open(output[0],"w") as out:
              for fn in input.bgf:
                  out.write(fn+"\n")



#+END_SRC

#+BEGIN_SRC snakemake :tangle ../workflow/ukb_snakefile

  rule bgen2plink:
      input:
          ukb_sample = config_d["UKB_SAMPLE"],
          target_bgen = config_d["UKB_PED"]+"chr{chrom}.bgen"
      params:
          output_p = config_d["UKB_PED"]+"chr{chrom}"
      output:
          target_bim = config_d["UKB_PED"]+"chr{chrom}.bim",
          target_bed = config_d["UKB_PED"]+"chr{chrom}.bed",
          target_fam = config_d["UKB_PED"]+"chr{chrom}.fam"
      shell:
          "/gpfs/data/xhe-lab/software/spack/opt/spack/linux-rhel6-haswell/gcc-9.2.0/plink2-master-cy4i77vbnkwgzpc56eaghkq27shwgcam/bin/plink2 --sample {input.ukb_sample} --bgen {input.target_bgen}  --make-bed --out {params.output_p}"


  rule cat_bgen_bgen:
      input:
          target_bgen = expand(config_d["UKB_PED"]+"chr{chrom}.bgen",chrom=range(1,23)),
          ukb_sample = config_d["UKB_SAMPLE"]
      output:
          target_bgen = config_d["UKB_PED"]+"all.bgen"
      shell:
          "/gpfs/data/xhe-lab/software/spack/opt/spack/linux-rhel6-haswell/gcc-9.2.0/bgen-default-f3kwhoklsgjdeojgjjzt6g4d5bqqmttt/bin/cat-bgen -g {input.target_bgen} -og {output.target_bgen}"

  rule all_bgen2plink:
      input:
          ukb_sample = config_d["UKB_SAMPLE"] ,
          target_bgen = config_d["UKB_PED"]+"all.bgen"
      params:
          output_p = config_d["UKB_PED"]+"all"
      output:
          target_bim = config_d["UKB_PED"]+"all.bim",
          target_bed = config_d["UKB_PED"]+"all.bed",
          target_fam = config_d["UKB_PED"]+"all.fam"
      shell:
          "/gpfs/data/xhe-lab/software/spack/opt/spack/linux-rhel6-haswell/gcc-9.2.0/plink2-master-cy4i77vbnkwgzpc56eaghkq27shwgcam/bin/plink2 --sample {input.ukb_sample} --bgen {input.target_bgen} ref-last --make-bed --out {params.output_p}"


  # rule which_ld_prune:
  #     input:
  #         famf=config_d["UKB_PED"]+"chr{chrom}.fam",
  #         bimf=config_d["UKB_PED"]+"chr{chrom}.bim",
  #         bedf=config_d["UKB_PED"]+"chr{chrom}.bed"
  #     params:
  #         in_pref=config_d["UKB_PED"]+"chr{chrom}",
  #         out_pref=config_d["GWAS"]+"ldp_out/{chrom}"
  #     output:
  #         inf=temp(config_d["GWAS"]+"ldp_out/{chrom}.prune.in"),
  #         outf=temp(config_d["GWAS"]+"ldp_out/{chrom}.prune.out")
  #     shell:
  #         "/gpfs/data/xhe-lab/software/spack/opt/spack/linux-rhel6-haswell/gcc-9.2.0/plink-master-aaxmha3khjivjpx5m5zyeg6zk6d6dj3o/bin/plink --bfile {params.in_pref} --indep-pairwise 50 5 0.2 --out {params.out_pref} --threads {threads}"

  # rule ld_prune:
  #     input:
  #         famf=rules.which_ld_prune.input.famf,
  #         bimf=rules.which_ld_prune.input.bimf,
  #         bedf=rules.which_ld_prune.input.bedf,
  #         inf=rules.which_ld_prune.output.inf
  #     params:
  #         in_pref=rules.which_ld_prune.params.in_pref,
  #         out_pref=config_d["UKB_PED"]+"ldi_bed/chr{chrom}"
  #     output:
  #         famf=temp(config_d["UKB_PED"]+"ldi_bed/chr{chrom}.fam"),
  #         bimf=temp(config_d["UKB_PED"]+"ldi_bed/chr{chrom}.bim"),
  #         bedf=temp(config_d["UKB_PED"]+"ldi_bed/chr{chrom}.bed"),
  #     shell:
  #         "/gpfs/data/xhe-lab/software/spack/opt/spack/linux-rhel6-haswell/gcc-9.2.0/plink-master-aaxmha3khjivjpx5m5zyeg6zk6d6dj3o/bin/plink --bfile {params.in_pref} --extract {input.inf} --make-bed --out {params.out_pref} --threads {threads}"

  # rule sub_ukb_big:
  #     input:
  #         config_d["UKB_SAMPLE"]
  #     output:
  #         singlef=config_d["GWAS"]+"grm_cut/sub_"+config_d["SAMPLEN"]+".txt"
  #     shell:
  #         "tail -n +2 {input} | grep -v '^-' | shuf -n "+config_d["SAMPLEN"]+" > {output.singlef}"

  rule all_sub_plink:
      input:
          famf=config_d["UKB_PED"]+"all.fam",
          bimf=config_d["UKB_PED"]+"all.bim",
          bedf=config_d["UKB_PED"]+"all.bed",
          sample_f= config_d["GWAS"]+"grm_cut/sub_"+config_d["SAMPLEN"]+".txt"
      params:
          ip=config_d["UKB_PED"]+"all",
          op=config_d["UKB_PED"]+"all_"+config_d["SAMPLEN"]
      output:
          famf=temp(config_d["UKB_PED"]+"t_all_"+config_d["SAMPLEN"]+".fam"),
          bimf=temp(config_d["UKB_PED"]+"t_all_"+config_d["SAMPLEN"]+".bim"),
          bedf=temp(config_d["UKB_PED"]+"t_all_"+config_d["SAMPLEN"]+".bed")
      shell:
          "/gpfs/data/xhe-lab/software/spack/opt/spack/linux-rhel6-haswell/gcc-9.2.0/plink2-master-cy4i77vbnkwgzpc56eaghkq27shwgcam/bin/plink2 --bfile {params.ip} --keep {input.sample_f} --make-bed --out {params.op}"

  rule all_gen_grm:
      input:
          famf=config_d["UKB_PED"]+"all_"+config_d["SAMPLEN"]+".fam",
          bimf=config_d["UKB_PED"]+"all_"+config_d["SAMPLEN"]+".bim",
          bedf=config_d["UKB_PED"]+"all_"+config_d["SAMPLEN"]+".bed"
      params:
          in_pref=config_d["UKB_PED"]+"all_"+config_d["SAMPLEN"]+"",
          out_pref=config_d["GWAS"]+"split_grm/grm",
          chunks_tot=config_d["CHUNKN"],
          chunk_i="{i}"
      output:
          grm_bin=config_d["GWAS"]+"split_grm/grm.grm.bin.{i}",
          grm_Nf= config_d["GWAS"]+"split_grm/grm.grm.N.bin.{i}"
      shell:
          "/gpfs/data/xhe-lab/software/spack/opt/spack/linux-rhel6-haswell/gcc-9.2.0/plink2-master-cy4i77vbnkwgzpc56eaghkq27shwgcam/bin/plink2 --bfile {params.in_pref} --make-grm-bin --parallel {params.chunk_i} {params.chunks_tot} --out {params.out_pref} --threads {threads}"

  rule gcta_p_grm:
      input:
          ff="{ps}/file_list.txt",
          bgff=expand(config_d["UKB_PED"]+"{{ps}}/chr{chrom}_"+config_d["SAMPLEN"]+".bgen",chrom=genome_chr),
          bgix=expand(config_d["UKB_PED"]+"{{ps}}/chr{chrom}_"+config_d["SAMPLEN"]+".bgen.bgi",chrom=genome_chr),
          samplef="/scratch/t.cri.nknoblauch/intersect_snplist/ukb_subset/{ps}/chr1_"+config_d["SAMPLEN"]+".sample"
      params:
          out_pref=config_d["GWAS"]+"split_grm/{ps}/grm",
          chunks_tot=config_d["CHUNKN"],
          chunk_i="{i}"
      output:
          grm_bf= config_d["GWAS"]+"split_grm/{ps}/grm.part_"+config_d["CHUNKN"]+"_{i}.grm.id",
          grm_Nf= config_d["GWAS"]+"split_grm/{ps}/grm.part_"+config_d["CHUNKN"]+"_{i}.grm.bin",
          grm_idf= config_d["GWAS"]+"split_grm/{ps}/grm.part_"+config_d["CHUNKN"]+"_{i}.grm.N.bin"
      threads: 1
      shell:
          "/gpfs/data/xhe-lab/software/spack/opt/spack/linux-rhel6-haswell/gcc-9.2.0/gcta-1.93.2beta-yz57zzuencwoygoiry6q62ab23tdpd27/bin/gcta64 --mbgen {input.ff} --maf 0.01 --sample {input.samplef} --make-grm-part {params.chunks_tot} {params.chunk_i} --out {params.out_pref} --threads {threads}"



  rule gcta_si_grm:
      input:
        famf=config_d["UKB_PED"]+"all_{samplesize}_ind.fam",
        bimf=config_d["UKB_PED"]+"all_{samplesize}_ind.bim",
        bedf=config_d["UKB_PED"]+"all_{samplesize}_ind.bed",
        snp_list=config_d["MODELD"]+"model_{samplesize}/{model}.txt",
      params:
          in_pref=config_d["UKB_PED"]+"all_{samplesize}_ind",
          out_pref=config_d["GWAS"]+"split_grm_{model}_{samplesize}/grm",
          chunks_tot=config_d["CHUNKN"],
          chunk_i="{i}"
      output:
          grm_bf= config_d["GWAS"]+"split_grm_{model}_{samplesize}/grm.part_"+config_d["CHUNKN"]+"_{i}.grm.id",
          grm_Nf= config_d["GWAS"]+"split_grm_{model}_{samplesize}/grm.part_"+config_d["CHUNKN"]+"_{i}.grm.bin",
          grm_idf= config_d["GWAS"]+"split_grm_{model}_{samplesize}/grm.part_"+config_d["CHUNKN"]+"_{i}.grm.N.bin"
      threads: 1
      shell:
          "/gpfs/data/xhe-lab/software/spack/opt/spack/linux-rhel6-haswell/gcc-9.2.0/gcta-1.93.2beta-yz57zzuencwoygoiry6q62ab23tdpd27/bin/gcta64 --bfile {params.in_pref} --extract {input.snp_list} --make-grm-part {params.chunks_tot} {params.chunk_i} --out {params.out_pref} --threads {threads}"





  rule subset_bgen2:
    input:
        bgf=config_d["UKB_PED"]+"{ps}/chr{chrom}_"+config_d["SAMPLEN"]+".bgen",
        grm_id=config_d["GWAS"]+"grm_cut/{ps}_{samplesize}.sample"
    params:
        out_pref=config_d["UKB_PED"]+"{ps}/chr{chrom}_{samplesize}_01_ind"
    output:
        bgf=config_d["UKB_PED"]+"{ps}/chr{chrom}_{samplesize}_01_ind.bgen",
        samplef=config_d["UKB_PED"]+"{ps}/chr{chrom}_{samplesize}_01_ind.sample"
    shell:
        config_d["QCTCMD"]+" -g {input.bgf} -incl-samples {input.grm_id} -og {output.bgf} -os {output.samplef} -bgen-compression \"zstd\" "

  rule cat_bgen2:
      input:
          target_bgen=expand(config_d["UKB_PED"]+"sub/chr{chrom}_{{samplesize}}_01_ind.bgen",chrom=genome_chr)
      output:
          config_d["UKB_PED"]+"all_{samplesize}_01_ind.bgen"
      shell:
          "/gpfs/data/xhe-lab/software/spack/opt/spack/linux-rhel6-haswell/gcc-9.2.0/bgen-default-f3kwhoklsgjdeojgjjzt6g4d5bqqmttt/bin/cat-bgen -g {input.target_bgen} -og {output}"

  rule cat_bgen_panel:
      input:
          target_bgen=expand(config_d["UKB_PED"]+"panel/chr{chrom}_{{samplesize}}_01_ind.bgen",chrom=genome_chr)
      output:
          config_d["UKB_PED"]+"split_map/temppanel_{samplesize}_01_ind.bgen"
      shell:
          "/gpfs/data/xhe-lab/software/spack/opt/spack/linux-rhel6-haswell/gcc-9.2.0/bgen-default-f3kwhoklsgjdeojgjjzt6g4d5bqqmttt/bin/cat-bgen -g {input.target_bgen} -og {output}"




  # rule all_gen_grm_id:
  #     input:
  #         famf=config_d["UKB_PED"]+"all_"+config_d["SAMPLEN"]+".fam",
  #         bimf=config_d["UKB_PED"]+"all_"+config_d["SAMPLEN"]+".bim",
  #         bedf=config_d["UKB_PED"]+"all_"+config_d["SAMPLEN"]+".bed"
  #     params:
  #         in_pref=config_d["UKB_PED"]+"all_"+config_d["SAMPLEN"]+"",
  #         out_pref=config_d["GWAS"]+"grm/grm",
  #         chunks_tot="950",
  #         chunk_i="949"
  #     output:
  #         grm_bin=temp(config_d["GWAS"]+"grm/grm.grm.bin.949"),
  #         grm_Nf= config_d["GWAS"]+"grm/grm.grm.id"
  #     shell:
  #         "/gpfs/data/xhe-lab/software/spack/opt/spack/linux-rhel6-haswell/gcc-9.2.0/plink2-master-cy4i77vbnkwgzpc56eaghkq27shwgcam/bin/plink2 --bfile {params.in_pref} --make-grm-list --parallel {params.chunk_i} {params.chunks_tot} --out {params.out_pref} --threads {threads}"




  rule cat_grm_bin:
      input:
          grm_bin=[config_d["GWAS"]+"split_grm/{ps}/grm.part_"+config_d["CHUNKN"]+"_{:02d}.grm.bin".format(i) for i in range(1,int(config_d["CHUNKN"])+1)]
      output:
          grm_bin=config_d["GWAS"]+"grm/{ps}/grm.grm.bin"
      shell:
          "cat {input.grm_bin} > {output.grm_bin}"

  rule cat_grm_N_bin:
      input:
          grm_bin=[config_d["GWAS"]+"split_grm/{ps}/grm.part_"+config_d["CHUNKN"]+"_{:02d}.grm.N.bin".format(i) for i in range(1,int(config_d["CHUNKN"])+1)]
      output:
          grm_bin=config_d["GWAS"]+"grm/{ps}/grm.grm.N.bin"
      shell:
          "cat {input.grm_bin} > {output.grm_bin}"


  rule cat_grm_id:
      input:
          grm_bin=[config_d["GWAS"]+"split_grm/{ps}/grm.part_"+config_d["CHUNKN"]+"_{:02d}.grm.id".format(i) for i in range(1,int(config_d["CHUNKN"])+1)]
      output:
          grm_id=config_d["GWAS"]+"grm/{ps}/grm.grm.id"
      shell:
          "cat {input.grm_bin} > {output.grm_id}"


  rule cut_grm:
      input:
          grm_bin=rules.cat_grm_bin.output.grm_bin,
          grm_id=rules.cat_grm_id.output.grm_id
      params:
          in_pref=config_d["GWAS"]+"grm/{ps}/grm",
          cut="0.05",
          cut_pref=config_d["GWAS"]+"grm_cut/{ps}/grm"
      output:
          singlef=config_d["GWAS"]+"grm_cut/{ps}/grm.singleton.txt",
          fam_f=config_d["GWAS"]+"grm_cut/{ps}/grm.family.txt",
          log_f=config_d["GWAS"]+"grm_cut/{ps}/grm.log"
      shell:
          "/gpfs/data/xhe-lab/software/spack/opt/spack/linux-rhel6-haswell/gcc-9.2.0/gcta-1.93.2beta-yz57zzuencwoygoiry6q62ab23tdpd27/bin/gcta64 --grm {params.in_pref} --grm-singleton {params.cut} --out {params.cut_pref}"

  rule sub_ukb_s:
      input:
          singlef=config_d["GWAS"]+"grm_cut/sub/grm.singleton.txt"
      params:
          samplesize="{samplesize}"
      output:
          singlef=config_d["GWAS"]+"grm_cut/sub_{samplesize}.txt",
          samplef=config_d["GWAS"]+"grm_cut/sub_{samplesize}.sample"
      shell:
          "grep -v '^-' {input.singlef} | shuf -n {params.samplesize}  > {output.singlef} && cut -f 1 {output.singlef} > {output.samplef}"


  rule sub_ukb_p:
      input:
          singlef=config_d["GWAS"]+"grm_cut/panel/grm.singleton.txt"
      params:
          samplesize="{samplesize}"
      output:
          singlef=config_d["GWAS"]+"grm_cut/panel_{samplesize}.txt",
          samplef=config_d["GWAS"]+"grm_cut/panel_{samplesize}.sample"
      shell:
          "grep -v '^-' {input.singlef} | shuf -n {params.samplesize}  > {output.singlef} && cut -f 1 {output.singlef} > {output.samplef}"

#+END_SRC

#+BEGIN_SRC snakemake :tangle ../workflow/ukb_snakefile

  rule sub_grm:
      input:
          singlef=config_d["GWAS"]+"grm_cut/sub_{samplesize}.txt",
          grmf=config_d["GWAS"]+"grm/sub/grm.grm.bin",
          grm_id=config_d["GWAS"]+"grm/sub/grm.grm.id",
          grm_binf=config_d["GWAS"]+"grm/sub/grm.grm.N.bin"
      params:
          ip=config_d["GWAS"]+"grm/sub/grm",
          op=config_d["GWAS"]+"grm_cut/{samplesize}_grm"
      output:
          grmf=config_d["GWAS"]+"grm_cut/{samplesize}_grm.grm.bin",
          grm_Nf=config_d["GWAS"]+"grm_cut/{samplesize}_grm.grm.N.bin",
          grm_id=config_d["GWAS"]+"grm_cut/{samplesize}_grm.grm.id"
      shell:
          "/gpfs/data/xhe-lab/software/spack/opt/spack/linux-rhel6-haswell/gcc-9.2.0/gcta-1.93.2beta-yz57zzuencwoygoiry6q62ab23tdpd27/bin/gcta64 --grm {params.ip} --keep {input.singlef} --make-grm --out {params.op}"

  rule plink2_pca:
      input:
          grmf=config_d["GWAS"]+"grm_{model}_{samplesize}/grm.grm.bin",
          grm_Nf=config_d["GWAS"]+"grm_{model}_{samplesize}/grm.grm.N.bin",
          grm_id=config_d["GWAS"]+"grm_{model}_{samplesize}/grm.grm.id"
      params:
          ip=config_d["GWAS"]+"grm_{model}_{samplesize}/grm",
          op=config_d["GWAS"]+"pca_{model}/{samplesize}_grm",
          npca=10
      output:
          valf=config_d["GWAS"]+"pca_{model}/{samplesize}_grm.eigenval",
          vecf=config_d["GWAS"]+"pca_{model}/{samplesize}_grm.eigenvec"
      threads: 12
      shell:
          "/gpfs/data/xhe-lab/software/spack/opt/spack/linux-rhel6-haswell/gcc-9.2.0/gcta-1.93.2beta-yz57zzuencwoygoiry6q62ab23tdpd27/bin/gcta64 --grm {params.ip} --out {params.op} --pca {params.npca} --threads {threads}"


  # rule merge_plink_cut_vcf:
  #     input:
  #         famf=config_d["UKB_PED"]+"all_"+config_d["SAMPLEN"]+".fam",
  #         bimf=config_d["UKB_PED"]+"all_"+config_d["SAMPLEN"]+".bim",
  #         bedf=config_d["UKB_PED"]+"all_"+config_d["SAMPLEN"]+".bed",
  #         grm_id=config_d["GWAS"]+"grm_cut/sub_{samplesize}.txt"
  #     params:
  #         in_pref=config_d["UKB_PED"]+"all",
  #         out_pref=config_d["UKB_PED"]+"all_{samplesize}_ind"
  #     output:
  #         famf=config_d["UKB_PED"]+"all_{samplesize}_ind.fam",
  #         bimf=config_d["UKB_PED"]+"all_{samplesize}_ind.bim",
  #         bedf=config_d["UKB_PED"]+"all_{samplesize}_ind.bed"
  #     shell:
  #         "/gpfs/data/xhe-lab/software/spack/opt/spack/linux-rhel6-haswell/gcc-9.2.0/plink2-master-cy4i77vbnkwgzpc56eaghkq27shwgcam/bin/plink2 --bfile {params.in_pref} --keep {input.grm_id} --make-bed --out {params.out_pref}"
#+END_SRC

#+BEGIN_SRC snakemake :tangle ../workflow/ukb_snakefile

  rule ref_fam:
      input:
          famf=config_d["UKB_SAMPLE"]
      params:
          samplesize=config_d["SAMPLEN"]
      output:
          sub_f = config_d["GWAS"]+"grm_cut/panel_"+config_d["SAMPLEN"]+".txt",
          grm_id=config_d["GWAS"]+"grm_cut/sub_"+config_d["SAMPLEN"]+".txt"
      script:
          "../scripts/sample_panel.R"

#+END_SRC


#+begin_src R :tangle ../scripts/sample_panel.R
  library(ldmap)
  library(dplyr)

  famf <- snakemake@input[["famf"]]
  #grm_id <- snakemake@input[["grm_id"]]
  #samplesize <- 12000
  samplesize <- as.integer(snakemake@params[["samplesize"]])
  read_fam <- function(x,col_names = TRUE){
  vroom::vroom(x, col_names = col_names)
  }

  fam_df <- read_fam(famf,TRUE) %>% rename(fid=ID_1,iid=ID_2) %>% filter(fid!=0)
  #ind_df <- read_fam(grm_id,FALSE) %>% 
  #rename(fid=X1,iid=X2) %>% 
  #filter(fid>0) %>% 
                                          #mutate(fid=fid,iid=iid)
  in_df <- fam_df %>% sample_n(samplesize, replace = FALSE)

  readr::write_tsv(in_df, snakemake@output[["grm_id"]], col_names = FALSE)


  anti_join(fam_df, in_df) %>% sample_n(samplesize,replace=FALSE) %>% 
    readr::write_tsv(snakemake@output[["sub_f"]],col_names=FALSE)

#+end_src




#+BEGIN_SRC snakemake :tangle ../workflow/ukb_snakefile




  rule pull_map_p:
      input:
          bgenf=config_d["UKB_PED"]+"split_map/temppanel_{samplesize}_01_ind.bgen",
          samplef=config_d["UKB_PED"]+"panel/chr{chrom}_{samplesize}_01_ind.sample"
      params:
          op=config_d["UKB_PED"]+"split_map/temppanel_{samplesize}_chr{chrom}",
          chrom="{chrom}"
      output:
          famf=temp(config_d["UKB_PED"]+"split_map/temppanel_{samplesize}_chr{chrom}.fam"),
          bimf=temp(config_d["UKB_PED"]+"split_map/temppanel_{samplesize}_chr{chrom}.bim"),
          bedf=temp(config_d["UKB_PED"]+"split_map/temppanel_{samplesize}_chr{chrom}.bed")
      threads: 12
      shell:
          "/gpfs/data/xhe-lab/software/spack/opt/spack/linux-rhel6-haswell/gcc-9.2.0/plink2-master-cy4i77vbnkwgzpc56eaghkq27shwgcam/bin/plink2 --bgen {input.bgenf} ref-first --sample {input.samplef} --maf 0.01 --chr {params.chrom} --make-bed --out {params.op} --threads {threads}"

  rule rpmap_p:
      input:
          famf=config_d["UKB_PED"]+"split_map/temppanel_{samplesize}_chr{chrom}.fam",
          bimf=config_d["UKB_PED"]+"split_map/temppanel_{samplesize}_chr{chrom}.bim",
          mapf=config_d["1KG"]+"hg19/GBR/GBR_recombination_map_plink_format_hg19_chr{chrom}.txt",
          bedf=config_d["UKB_PED"]+"split_map/temppanel_{samplesize}_chr{chrom}.bed"
      params:
          ip=config_d["UKB_PED"]+"split_map/temppanel_{samplesize}_chr{chrom}",
          op=config_d["UKB_PED"]+"split_map/panel_{samplesize}_chr{chrom}",
          chrom="{chrom}"
      output:
          famf=config_d["UKB_PED"]+"split_map/panel_{samplesize}_chr{chrom}.fam",
          bimf=config_d["UKB_PED"]+"split_map/panel_{samplesize}_chr{chrom}.bim",
          bedf=config_d["UKB_PED"]+"split_map/panel_{samplesize}_chr{chrom}.bed"
      shell:
          "cp {input.famf} {output.famf} && cp {input.bedf} {output.bedf} && plink --bim {input.bimf} --cm-map {input.mapf} {params.chrom} --make-just-bim --out {params.op}"


  # rule sample_ref_vcf:
  #     input:
  #         famf=config_d["UKB_PED"]+"all.fam",
  #         bimf=config_d["UKB_PED"]+"all.bim",
  #         bedf=config_d["UKB_PED"]+"all.bed",
  #         grm_id=config_d["GWAS"]+"grm_cut/panel_{samplesize}.txt"
  #     params:
  #         in_pref=config_d["UKB_PED"]+"all",
  #         out_pref=config_d["UKB_PED"]+"panel_{samplesize}"
  #     output:
  #         famf=config_d["UKB_PED"]+"panel_{samplesize}.fam",
  #         bimf=config_d["UKB_PED"]+"panel_{samplesize}.bim",
  #         bedf=config_d["UKB_PED"]+"panel_{samplesize}.bed"
  #     shell:
  #         "/gpfs/data/xhe-lab/software/spack/opt/spack/linux-rhel6-haswell/gcc-9.2.0/plink2-master-cy4i77vbnkwgzpc56eaghkq27shwgcam/bin/plink2 --bfile {params.in_pref} --keep {input.grm_id} --make-bed --out {params.out_pref}"


  # rule freqf_p:
  #     input:
  #         famf=config_d["UKB_PED"]+"panel_{samplesize}.fam",
  #         bimf=config_d["UKB_PED"]+"panel_{samplesize}.bim",
  #         bedf=config_d["UKB_PED"]+"panel_{samplesize}.bed"
  #     params:
  #         in_pref=config_d["UKB_PED"]+"panel_{samplesize}",
  #         out_pref=config_d["UKB_PED"]+"panel_{samplesize}_freq"
  #     output:
  #         freqf=config_d["UKB_PED"]+"panel_{samplesize}_freq.frq",
  #         logf=config_d["UKB_PED"]+"panel_{samplesize}_freq.log"
  #     shell:
  #         "/gpfs/data/xhe-lab/software/spack/opt/spack/linux-rhel6-haswell/gcc-9.2.0/plink2-master-cy4i77vbnkwgzpc56eaghkq27shwgcam/bin/plink2 --bfile {params.in_pref}  --freq --out {params.out_pref}"

  rule freq_p:
      input:
          bgen=config_d["UKB_PED"]+"split_map/temppanel_{samplesize}_01_ind.bgen",
          samplef=config_d["UKB_PED"]+"panel/chr1_{samplesize}_01_ind.sample"
      params:
          out_pref=config_d["UKB_PED"]+"split_map/panel_{samplesize}_ind_freq"
      output:
          freqf=config_d["UKB_PED"]+"split_map/panel_{samplesize}_ind_freq.afreq",
          logf=config_d["UKB_PED"]+"split_map/panel_{samplesize}_ind_freq.log"
      shell:
          "/gpfs/data/xhe-lab/software/spack/opt/spack/linux-rhel6-haswell/gcc-9.2.0/plink2-master-cy4i77vbnkwgzpc56eaghkq27shwgcam/bin/plink2 --bgen {input.bgen} ref-first --sample {input.samplef} --freq --out {params.out_pref} --threads {threads}"
        


        

  rule freqf_ind:
      input:
          famf=config_d["UKB_PED"]+"all_{samplesize}_ind.fam",
          bimf=config_d["UKB_PED"]+"all_{samplesize}_ind.bim",
          bedf=config_d["UKB_PED"]+"all_{samplesize}_ind.bed",
          var_f = config_d["UKB_PED"]+"sub/uniq_vars_"+config_d["SAMPLEN"]+".txt"
      params:
          in_pref = config_d["UKB_PED"]+"all_{samplesize}_ind",
          out_pref=config_d["UKB_PED"]+"all_{samplesize}_ind_freq"
      output:
          freqf=config_d["UKB_PED"]+"all_{samplesize}_ind_freq.afreq",
          logf=config_d["UKB_PED"]+"all_{samplesize}_ind_freq.log"
      threads: 1
      shell:
          "/gpfs/data/xhe-lab/software/spack/opt/spack/linux-rhel6-haswell/gcc-9.2.0/plink2-master-cy4i77vbnkwgzpc56eaghkq27shwgcam/bin/plink2 --bfile {params.in_pref} --extract {input.var_f} --freq --out {params.out_pref} --threads {threads}"        


  rule causal_snps_polymatch:
      input:
          freqf=config_d["UKB_PED"]+"all_{samplesize}_ind_freq.afreq",
          freqpf=config_d["UKB_PED"]+"split_map/panel_{samplesize}_ind_freq.afreq"
      output:
          snp_list=config_d["MODELD"]+"model_{samplesize}/polym.txt"
      params:
          snp_freq=0.01
      script:
          "../scripts/filter_freq.R"


  rule causal_snps_poly:
      input:
          freqf=config_d["UKB_PED"]+"all_{samplesize}_ind_freq.afreq"
      output:
          snp_list=config_d["MODELD"]+"model_{samplesize}/poly.txt"
      params:
          snp_freq=0.05
      script:
          "../scripts/filter_freq.R"

  rule one_chrom:
      input:
          freqf=config_d["UKB_PED"]+"all_{samplesize}_ind_freq.afreq"
      output:
          snp_list=config_d["UKB_PED"]+"model_{samplesize}/onec.txt"
      params:
          snp_freq=0.05,
          chrom=19,
          max_p=70000
      script:
          "../scripts/filter_chrom.R"

      # rule poly_sim_pheno:
      #     input:
      #         snp_list=config_d["UKB_PED"]+"model_{samplesize}/{model}.txt",
      #         famf=config_d["UKB_PED"]+"all_{samplesize}_ind.fam",
      #         bimf=config_d["UKB_PED"]+"all_{samplesize}_ind.bim",
      #         bedf=config_d["UKB_PED"]+"all_{samplesize}_ind.bed"
      #     params:
      #         h2="{h2}",
      #         num_traits="{nt}",
      #         pref=config_d["GWAS"]+"pheno/{model}_{h2}_{nt}_{samplesize}",
      #         ip=config_d["UKB_PED"]+"all_{samplesize}_ind"
      #     output:
      #         phenof=config_d["GWAS"]+"pheno/{model}_{h2}_{nt}_{samplesize}.phen",
      #         true_b=config_d["GWAS"]+"pheno/{model}_{h2}_{nt}_{samplesize}.par"
      #     log:
      #         logf=config_d["GWAS"]+"pheno/{model}_{h2}_{nt}_{samplesize}.log"
      #     threads:
      #         12
      #     shell:
      #         "gcta64 --simu-qt --simu-hsq {params.h2} --bfile {params.ip} --out {params.pref} --simu-rep {params.num_traits} --simu-causal-loci {input.snp_list} --threads {threads}"



  rule poly_sim_simu:
      input:
          snp_list=config_d["MODELD"]+"model_{samplesize}/{model}.txt",
          famf=config_d["UKB_PED"]+"all_{samplesize}_ind.fam",
          bimf=config_d["UKB_PED"]+"all_{samplesize}_ind.bim",
          bedf=config_d["UKB_PED"]+"all_{samplesize}_ind.bed"
      params:
          h2="{h2}",
          pref=config_d["GWAS"]+"pheno/{model}_{h2}_{trait}_10_{samplesize}",
          ip=config_d["UKB_PED"]+"all_{samplesize}_ind"
      output:
          phenof=config_d["GWAS"]+"pheno/{model}_{h2}_{trait}_10_{samplesize}.1.causals",
          true_b=config_d["GWAS"]+"pheno/{model}_{h2}_{trait}_10_{samplesize}.pheno"
      log:
          logf=config_d["GWAS"]+"pheno/{model}_{h2}_{trait}_10_{samplesize}.log"
      shell:
          "/gpfs/data/xhe-lab/software/spack/opt/spack/linux-rhel6-haswell/gcc-9.2.0/simu-0.9.4.1-v4noiyhxr5574otcocygl2l2jd7krwns/bin/simu --bfile {params.ip} --out {params.pref} --hsq {params.h2} --causal-variants {input.snp_list} --qt --gcta-sigma"


  rule ind2plink:
      input:
          bgen=config_d["UKB_PED"]+"all_{samplesize}_01_ind.bgen",
          samplef=config_d["UKB_PED"]+"sub/chr1_{samplesize}_01_ind.sample",
          var_f = config_d["UKB_PED"]+"sub/uniq_vars_"+config_d["SAMPLEN"]+".txt"
      params:
          out_pref=config_d["UKB_PED"]+"all_{samplesize}_ind"
      output:
          famf=config_d["UKB_PED"]+"all_{samplesize}_ind.fam",
          bimf=config_d["UKB_PED"]+"all_{samplesize}_ind.bim",
          bedf=config_d["UKB_PED"]+"all_{samplesize}_ind.bed"
      shell:
          "/gpfs/data/xhe-lab/software/spack/opt/spack/linux-rhel6-haswell/gcc-9.2.0/plink2-master-cy4i77vbnkwgzpc56eaghkq27shwgcam/bin/plink2 --bgen {input.bgen} ref-first --extract {input.var_f} --sample {input.samplef} --make-bed --out {params.out_pref} --threads {threads}"



          # checkpoint plink_gwas_cov_o:
          #     input:
          #         famf=config_d["UKB_PED"]+"split_map/ind_{samplesize}_chr19.fam",
          #         bimf=config_d["UKB_PED"]+"split_map/ind_{samplesize}_chr19.bim",
          #         bedf=config_d["UKB_PED"]+"split_map/ind_{samplesize}_chr19.bed",
          #         phenof=config_d["GWAS"]+"pheno/onec_{h2}_10_{samplesize}.phen",
          #         vecf=config_d["GWAS"]+"pca/{samplesize}_grm.eigenvec"
          #     params:
          #         ip=config_d["UKB_PED"]+"split_map/ind_{samplesize}_chr19",
          #         op=config_d["GWAS"]+"gwas_covar_ss/onec_{h2}_10_10_{samplesize}/res",
          #     output:
          #         assoc_d=directory(config_d["GWAS"]+"gwas_covar_ss/onec_{h2}_10_10_{samplesize}"),
          #         logf="onec_{h2}_10_10_{samplesize}.log"
          #     threads:
          #         12
          #     shell:
          #         "mkdir -p {output.assoc_d} && plink2 --bfile {params.ip} --pheno {input.phenof} --glm hide-covar --maf 0.05 --covar {input.vecf} --threads {threads} --out {params.op} && mv {params.op}.log {output.logf}"


          # checkpoint plink_gwas_cov_p:
          #     input:
          #         bgen=config_d["UKB_PED"]+"all_{samplesize}_01_ind.bgen",
          #         samplef=config_d["UKB_PED"]+"chr1_{samplesize}_01_ind.sample",
          #         phenof=config_d["GWAS"]+"pheno/poly_{h2}_10_{samplesize}.phen",
          #         vecf=config_d["GWAS"]+"pca/{samplesize}_grm.eigenvec"
          #     params:
          #         op=config_d["GWAS"]+"gwas_covar_ss/poly_{h2}_10_10_{samplesize}/res"
          #     output:
          #         assoc_d=directory(config_d["GWAS"]+"gwas_covar_ss/poly_{h2}_10_10_{samplesize}"),
          #         logf="poly_{h2}_10_10_{samplesize}.log"
          #     threads:
          #         12
          #     shell:
          #         "mkdir -p {output.assoc_d} && plink2 --bgen {input.bgen} ref-first --sample {input.samplef} --pheno {input.phenof} --glm hide-covar --maf 0.05 --covar {input.vecf} --threads {threads} --out {params.op} && mv {params.op}.log {output.logf}"


  rule gcta_sparsify_grm:
      input:
          grmf=config_d["GWAS"]+"grm_{model}_{samplesize}/grm.grm.bin",
          grm_id=config_d["GWAS"]+"grm_{model}_{samplesize}/grm.grm.id",
          grm_Nf=config_d["GWAS"]+"grm_{model}_{samplesize}/grm.grm.N.bin"
      output:
          idf=config_d["GWAS"]+"grm_sparse/grm_sparse_{samplesize}.grm.id",
          spf=config_d["GWAS"]+"grm_sparse/grm_sparse_{samplesize}.grm.sp",
          logf=config_d["GWAS"]+"grm_sparse/grm_sparse_{samplesize}.grm.log"
      params:
          ip=config_d["GWAS"]+"grm_{model}_{samplesize}/grm.grm",
          op=config_d["GWAS"]+"grm_sparse/grm_sparse_{samplesize}"
      shell:
          "/gpfs/data/xhe-lab/software/spack/opt/spack/linux-rhel6-haswell/gcc-9.2.0/gcta-1.93.2beta-yz57zzuencwoygoiry6q62ab23tdpd27/bin/gcta64 --grm {params.ip} --make-bK-sparse 0.05 --out {params.op}"


  rule gcta_gwas_cov_p:
      input:
          famf=config_d["UKB_PED"]+"all_{samplesize}_ind.fam",
          bimf=config_d["UKB_PED"]+"all_{samplesize}_ind.bim",
          bedf=config_d["UKB_PED"]+"all_{samplesize}_ind.bed",
          phenof=config_d["GWAS"]+"pheno/{model}_{h2}_{trait}_10_{samplesize}.pheno",
          vecf=config_d["GWAS"]+"pca_{model}/{samplesize}_grm.eigenvec"
      params:
          ip=config_d["UKB_PED"]+"all_{samplesize}_ind",
          op=config_d["GWAS"]+"gwas_covar_ss/{model}_{h2}_{trait}_10_{samplesize}/res"
      output:
          assoc_d=config_d["GWAS"]+"gwas_covar_ss/{model}_{h2}_{trait}_10_{samplesize}/res.fastGWA",
          logf=config_d["GWAS"] +  "gwas_covar_ss/{model}_{h2}_{trait}_10_{samplesize}/res.log"
      threads:
          2
      shell:
          "/gpfs/data/xhe-lab/software/spack/opt/spack/linux-rhel6-haswell/gcc-9.2.0/gcta-1.93.2beta-yz57zzuencwoygoiry6q62ab23tdpd27/bin/gcta64 --bfile {params.ip} --fastGWA-lr --pheno {input.phenof} --qcovar {input.vecf} --threads {threads} --out {params.op}"







#+END_SRC

#+BEGIN_SRC snakemake :tangle ../workflow/ukb_snakefile

  # rule sub_gwass_p:
  #     input:
  #         vecf=config_d["GWAS"]+"gwas_covar_ss/poly_{h2}_{nt}_10_{samplesize}/res.fastGWA"
  #     output:
  #         tempf=config_d['GWAS'] +"ldsc_input/poly_{trait}_{nt}_10_{h2}_{samplesize}.sumstats.gz"
  #     script:
  #         "../scripts/cols_cut.R"

  rule sub_gwass_gcta:
      input:
          vecf=config_d["GWAS"]+"gwas_covar_ss/poly_{h2}_{trait}_10_{samplesize}/res.fastGWA",
      output:
          tempf=config_d['GWAS'] +"ldsc_input/poly_{trait}_10_{h2}_{samplesize}.sumstats.gz"
      script:
          "../scripts/cols_cut_gcta.R"

  rule sub_gwass_gcta_pm:
      input:
          vecf=config_d["GWAS"]+"gwas_covar_ss/polym_{h2}_{trait}_10_{samplesize}/res.fastGWA",
      output:
          tempf=config_d['GWAS'] +"ldsc_input/polym_{trait}_10_{h2}_{samplesize}.sumstats.gz"
      script:
          "../scripts/cols_cut_gcta.R"


  rule sub_gwass_gcta_h5:
      input:
          vecf=expand(config_d["GWASDB"]+"gwas_covar_ss/polym_{{h2}}_{trait}_10_{{samplesize}}/res.fastGWA",trait=ntr)
      params:
          h2=["{h2}"]*10,
          traits=ntr
      output:
          outf=config_d['GWAS'] +"gwas_h5/polym_{h2}_{samplesize}_sumstats.h5"
      script:
          "../scripts/cols_cut_gwas_h5.R"


  rule sub_gwass_o:
      input:
          vecf=config_d["GWAS"]+"gwas_covar_ss/onec_{h2}_{trait}_10_{samplesize}/res.PHENO{trait}.glm.linear"
      output:
          tempf=config_d['GWAS'] +"ldsc_input/onec_{trait}_10_{h2}_{samplesize}.sumstats.gz"
      script:
          "../scripts/cols_cut.R"

#+END_SRC

#+BEGIN_SRC R :tangle ../scripts/cols_cut_gwas_h5.R

  library(EigenH5)
  library(dplyr)
  library(ldmap)
  library(vroom)

  gwas_files <- snakemake@input[["vecf"]]
  h2 <- snakemake@params[["h2"]]
  traits <- snakemake@params[["traits"]]
  output_h5 <- snakemake@output[["outf"]]
  rsidpath <- "SNP"
  snppath <- "snp_struct"
  z_mat <- "Z"
  param_df <- tibble(h2=h2,traits=traits)

  read_fun <- vroom::vroom
  co <- vroom::cols_only(CHR=vroom::col_character(),
                         SNP=vroom::col_character(),
                         POS=vroom::col_integer(),
                         A1=vroom::col_character(),
                         A2=vroom::col_character(),
                         BETA=vroom::col_double(),
                         SE=vroom::col_double())
  oco <- vroom::cols_only(BETA=vroom::col_double(),
                          SE=vroom::col_double())

  EigenH5::write_df_h5(param_df,output_h5,"params")
  tf <- read_fun(gwas_files[1],delim="\t",col_types = co)
  snp_s <- new_ldmap_snp(tf$CHR,tf$POS,tf$A1,tf$A2)
  ldr <- ldmap::snp_in_region(snp_s,ldetect_EUR)
  rle2o <- EigenH5::rle2offset(ldr)
  EigenH5::write_df_h5(rle2o,output_h5,"ldmap_region_offset")
  EigenH5::write_vector_h5(snp_s,output_h5,snppath)
  EigenH5::write_vector_h5(tf$SNP,output_h5,rsidpath)

  EigenH5::create_matrix_h5(filename = output_h5,datapath = z_mat,data=numeric(),dim=c(nrow(tf),length(gwas_files)))
  names(gwas_files) <- seq_along(gwas_files)
  progressr::with_progress({
    p <- progressr::progressor(along=gwas_files)
    purrr::iwalk(gwas_files,function(tf,offset){
      p()
      in_df <- read_fun(tf,delim="\t",col_types=oco)
      in_mat <- as.matrix(in_df$BETA/in_df$SE)
      EigenH5::write_matrix_h5(in_mat,filename = output_h5,datapath=z_mat,offset=c(0L,as.integer(offset)-1L),datasize=dim(in_mat))
    })
  })

#+END_SRC


#+begin_src R :tangle ../scripts/filter_freq.R
    library(dplyr)
    af <- as.numeric(snakemake@params[["snp_freq"]])
    ind_df <- vroom::vroom(snakemake@input[["freqf"]]) %>% 
    filter(between(ALT_FREQS,af,1-af)) %>% 
    select(ID) %>% 
    dplyr::count(ID) %>% 
    filter(n==1) %>% 
    select(ID)

    vroom::vroom(snakemake@input[["freqpf"]]) %>% 
    filter(between(ALT_FREQS,af,1-af)) %>% 
    select(ID)  %>% 
    dplyr::count(ID) %>% 
    filter(n==1) %>% 
    select(ID) %>% 
    semi_join(ind_df,by="ID") %>% 
    readr::write_tsv(snakemake@output[["snp_list"]],col_names=FALSE)

#+END_SRC


#+begin_src R :tangle ../scripts/filter_chrom.R
  library(dplyr)
  library(purrr)
  af <- as.numeric(snakemake@params[["snp_freq"]])
  max_p <- snakemake@params[["max_p"]] 
  idf <- vroom::vroom(snakemake@input[["freqf"]]) %>% 
    filter(`#CHROM`==as.integer(snakemake@params[["chrom"]] %||% 19),
           between(ALT_FREQS,af,1-af))
  idf %>% 
  slice(seq_len(as.integer(max_p %||% nrow(idf)))) %>% 
  select(ID) %>% 
  readr::write_tsv(snakemake@output[["snp_list"]],col_names=FALSE)

#+END_SRC


#+begin_src R :tangle ../scripts/cols_cut.R
    library(dplyr)
    vroom::vroom(snakemake@input[["vecf"]]) %>% 
      dplyr::transmute(SNP=ID,A1,A2=REF,N=OBS_CT,Z=BETA/SE) %>% 
    vroom::vroom_write(snakemake@output[["tempf"]],delim="\t")
#+end_src


#+begin_src R :tangle ../scripts/cols_cut_gcta.R
    library(dplyr)
    vroom::vroom(snakemake@input[["vecf"]]) %>% 
      dplyr::transmute(SNP=SNP,A1=A1,A2=A2,N=N,Z=BETA/SE) %>% 
    vroom::vroom_write(snakemake@output[["tempf"]],delim="\t")
#+end_src


#+begin_src R :tangle ../scripts/add_ch_map.R

#+end_src




#+BEGIN_SRC snakemake :tangle ../workflow/ukb_snakefile
  rule plink_map:
      input:
          config_d["1KG"]+"hg19/GBR/GBR_recombination_map_hapmap_format_hg19_chr_{chrom}.txt"
      params:
          chrom="{chrom}"
      output:
          config_d["1KG"]+"hg19/GBR/GBR_recombination_map_plink_format_hg19_chr{chrom}.txt"
      shell:
          """cut -f 1 --complement {input} > {output}"""


  rule pull_map:
      input:
          famf=config_d["UKB_PED"]+"all_{samplesize}_ind.fam",
          bimf=config_d["UKB_PED"]+"all_{samplesize}_ind.bim",
          bedf=config_d["UKB_PED"]+"all_{samplesize}_ind.bed",
          mapf=config_d["1KG"]+"hg19/GBR/GBR_recombination_map_plink_format_hg19_chr{chrom}.txt"
      params:
          ip=config_d["UKB_PED"]+"all_{samplesize}_ind",
          op=config_d["UKB_PED"]+"split_map/ind_{samplesize}_chr{chrom}",
          chrom="{chrom}"
      output:
          famf=config_d["UKB_PED"]+"split_map/ind_{samplesize}_chr{chrom}.fam",
          bimf=config_d["UKB_PED"]+"split_map/ind_{samplesize}_chr{chrom}.bim",
          bedf=config_d["UKB_PED"]+"split_map/ind_{samplesize}_chr{chrom}.bed"
      shell:
          "/gpfs/data/xhe-lab/software/spack/opt/spack/linux-rhel6-haswell/gcc-9.2.0/plink-master-aaxmha3khjivjpx5m5zyeg6zk6d6dj3o/bin/plink --bfile {params.ip} --chr {params.chrom} --cm-map {input.mapf} {params.chrom} --make-bed --out {params.op}"


#+END_SRC

#+BEGIN_SRC snakemake :tangle ../workflow/ukb_snakefile

  rule ldshrink_ldo:
      input:
          famf=config_d["UKB_PED"]+"split_map/{source}_{samplesize}_chr{chrom}.fam",
          bimf=config_d["UKB_PED"]+"split_map/{source}_{samplesize}_chr{chrom}.bim",
          bedf=config_d["UKB_PED"]+"split_map/{source}_{samplesize}_chr{chrom}.bed",
          snp_list=config_d["UKB_PED"]+"model_{samplesize}/onec.txt"
      params:
          shrink="{shrink}"
      output:
          h5f=config_d['GWAS']+"ldo_{shrink}/{source}_{samplesize}_chr{chrom}.h5"
      script:
          "../scripts/ldshrink_ldo.R"



  rule ldshrink_ld:
      input:
          famf=config_d["UKB_PED"]+"split_map/{source}_{samplesize}_chr{chrom}.fam",
          bimf=config_d["UKB_PED"]+"split_map/{source}_{samplesize}_chr{chrom}.bim",
          bedf=config_d["UKB_PED"]+"split_map/{source}_{samplesize}_chr{chrom}.bed",
          snp_list=config_d["MODELD"]+"model_{samplesize}/{model}.txt",
          sumststat_dbd=config_d['GWASDB'] +"rssp_ss/{model}_1_10_0.1_{samplesize}.sumstats"
      params:
          shrink="{shrink}",
          ldchunk="{scatteritem}",
          n_ldchunks=ldc
      output:
          h5f=config_d['LD_DIR']+"ld_{shrink}_{model}/{source}_{samplesize}_chr{chrom}_{scatteritem}.h5"
      script:
          "../scripts/ldshrink_ld.R"

#+END_SRC

#+begin_src R :tangle ../scripts/ldshrink_ld.R
  library(dplyr)
  library(ldmap)
  library(ldshrink)
  library(purrr)
  library(EigenH5)
  library(BBmisc)
  library(duckdb)

  shrink <- snakemake@params[["shrink"]] 
  ldchunk  <- as.integer(snakemake@params[["ldchunk"]]  %||% 1L)
  n_ldchunk <- as.integer(snakemake@params[["n_ldchunks"]]  %||% 1L)
  sumstat_dbd <- snakemake@input[["sumststat_dbd"]]
  stopifnot(!is.null(sumstat_dbd))
  if(is.null(shrink)){
    doshrink <- TRUE
  }else{
    doshrink <- shrink=="shrink"
  }
  snplist_f <- snakemake@input[["snp_list"]]
  snplist_df <- tibble(SNP=scan(snplist_f,what=character()))
  con  <-  dbConnect(duckdb::duckdb(), dbdir=sumstat_dbd,read_only=TRUE)

  sumstat_df <- tbl(con,"gwas")
  bim_df <- read_plink_bim(snakemake@input[["bimf"]]) %>% 
    mutate(snp_id = 1:n(),
           ldmr = snp_overlap_region(snp_struct, ldetect_EUR),
           SNP=rsid) %>%
    semi_join(snplist_df) %>%
    semi_join(sumstat_df, by = "SNP", copy = TRUE) %>%
    collect() %>% 
    distinct(SNP, .keep_all = TRUE)
  fam_df <- read_plink_fam(snakemake@input[["famf"]])
  N <- nrow(fam_df)
  bim_l <- chunk(split(bim_df, bim_df$ldmr),n.chunks=n_ldchunk)[[ldchunk]]

  purrr::walk(bim_l, function(df){
    cat(as.character(ldetect_EUR[unique(df$ldmr)]),"\n")
    gl <- read_plink_bed(snakemake@input[["bedf"]], subset = df$snp_id, N = N)
    Xm <- gt2matrix(gl)
    cS <- colSums(Xm, na.rm = TRUE)
    cAF <- cS / (N * 2)
    cM <- cS/(N-1)
    bad_snps <- cAF==0 | cAF==1
    indx <- which(is.na(Xm), arr.ind = TRUE)
    Xm[indx] <- cM[indx[,2]]
    sXm <- Xm[,!bad_snps]
    sdf <- filter(df,!bad_snps)
    cor2  <- function(x){1/(NROW(x) -1) * crossprod(scale(x, TRUE , TRUE))}
    if(!doshrink){
      R  <- cor2(sXm)
      ## svdX <- svd(sXm, nu = 0, nv = ncol(sXm))
      ## d <- (svdX$d^2) / (nrow(fam_df)-1)
      ## q <- svdX$v
    }else{
      R <- ldshrink::ldshrink(sXm, sdf$map, isGeno = TRUE, na.rm=FALSE)
    }
    lvdR <- eigen(R)
    d <- lvdR$values
    q <- lvdR$vectors
    ldmr_id <- as.character(ldetect_EUR[unique(sdf$ldmr)])
    write_matrix_h5(q, snakemake@output[["h5f"]], paste0(ldmr_id, "/Q"))
    write_vector_h5(d, snakemake@output[["h5f"]], paste0(ldmr_id, "/D"))
    write_vector_h5(sdf$snp_id, snakemake@output[["h5f"]], paste0(ldmr_id, "/snp_id"))
    write_vector_h5v(sdf$SNP, snakemake@output[["h5f"]], paste0(ldmr_id, "/rsid"))
    write_vector_h5(sdf$snp_struct, snakemake@output[["h5f"]], paste0(ldmr_id, "/snp_struct"))
  })

#+end_src


#+begin_src R :tangle ../scripts/ldshrink_ldo.R
    library(dplyr)
    library(ldmap)
    library(ldshrink)
    library(EigenH5)
    shrink <- snakemake@params[["shrink"]]
    if(is.null(shrink)){
      doshrink <- TRUE
    }else{
      doshrink <- shrink=="shrink"
    }
    snplist_f <- snakemake@input[["snp_list"]]
    snplist_df <- tibble(rsid=rsid2int(scan(snplist_f,what=character())))

    bim_df <- read_plink_bim(snakemake@input[["bimf"]]) %>%
      mutate(snp_id = 1:n(),
             ldmr = chromosomes(snp_struct),
             rsid = rsid2int(rsid))  %>% 
             semi_join(snplist_df)
    fam_df <- read_plink_fam(snakemake@input[["famf"]])
    N <- nrow(fam_df)
    bim_l <- split(bim_df, bim_df$ldmr)

    purrr::walk(bim_l, function(df){
      gl <- read_plink_bed(snakemake@input[["bedf"]], subset = df$snp_id, N = N)
      Xm <- gt2matrix(gl)
      cS <- colSums(Xm, na.rm = TRUE)
      cAF <- cS / (N * 2)
      cM <- cS/(N-1)
      bad_snps <- cAF==0 | cAF==1
      indx <- which(is.na(Xm), arr.ind = TRUE)
      Xm[indx] <- cM[indx[,2]]
      sXm <- Xm[,!bad_snps]
      sdf <- filter(df,!bad_snps)
      if(!doshrink){
        svdX <- svd(sXm, nu = 0, nv = ncol(sXm))
        d <- (svdX$d^2) / (nrow(fam_df)-1)
        q <- svdX$v
      }else{
        R <- ldshrink::ldshrink(sXm, sdf$map, isGeno = TRUE, na.rm=FALSE)
        lvdR <- eigen(R)
        d <- lvdR$values
        q <- lvdR$vectors
      }
      ldmr_id <- as.character(unique(sdf$ldmr))

      write_matrix_h5(q,snakemake@output[["h5f"]], paste0(ldmr_id, "/Q"))
      write_vector_h5(d, snakemake@output[["h5f"]], paste0(ldmr_id, "/D"))
      write_vector_h5(sdf$snp_id, snakemake@output[["h5f"]], paste0(ldmr_id, "/snp_id"))
      write_vector_h5(sdf$rsid, snakemake@output[["h5f"]], paste0(ldmr_id, "/rsid"))
    })

#+end_src



#+BEGIN_SRC snakemake :tangle ../workflow/ukb_snakefile

  rule cmp_baselineb_ldscores:
      """ Compute baseline ld scores for the single annotation at a single chromosome"""
      input:
          famf=config_d["UKB_PED"]+"split_map/{source}_{samplesize}_chr{chrom}.fam",
          bimf=config_d["UKB_PED"]+"split_map/{source}_{samplesize}_chr{chrom}.bim",
          bedf=config_d["UKB_PED"]+"split_map/{source}_{samplesize}_chr{chrom}.bed"
      output:
          l2=(config_d['L2']+"ukb_baseline/{source}.{samplesize}.{chrom}.l2.M"),
          l2M_50=(config_d['L2']+"ukb_baseline/{source}.{samplesize}.{chrom}.l2.M_5_50"),
          l2gz=(config_d['L2']+"ukb_baseline/{source}.{samplesize}.{chrom}.l2.ldscore.gz")
      params:
          plink=config_d["UKB_PED"]+"split_map/{source}_{samplesize}_chr{chrom}",
          odir=config_d['L2']+"ukb_baseline/{source}.{samplesize}.{chrom}"
      shell:
          config_d['LDSC']+"ldsc.py --l2 --bfile {params.plink}  --ld-wind-cm 1 --out {params.odir}"


  rule baseline_ldsc:
      input:
          gwasf=config_d['GWAS'] +"ldsc_input/{model}_{trait}_10_{h2}_{samplesize}.sumstats.gz",
          baselinef=expand(config_d['L2'] +"ukb_baseline/{{source}}.{{samplesize}}.{chrom}.l2.ldscore.gz",chrom=range(1,23)),
          baseline_l2m=expand(config_d['L2'] +"ukb_baseline/{{source}}.{{samplesize}}.{chrom}.l2.M",chrom=range(1,23)),
          baseline_l2m50=expand(config_d['L2'] +"ukb_baseline/{{source}}.{{samplesize}}.{chrom}.l2.M_5_50",chrom=range(1,23))
      output:
          dataf="results/sim_ukb_{source}/{model}_{trait}_10_{h2}_{samplesize}.int.log"
      params:
          baseline=config_d['L2']+"ukb_baseline/{source}.{samplesize}.",
          weights=config_d['L2']+"ukb_baseline/{source}.{samplesize}.",#,config_d['WEIGHTS']+"weights.hm3_noMHC.",
          odir="results/sim_ukb_{source}/{model}_{trait}_10_{h2}_{samplesize}.int"
      shell:
          config_d['LDSC']+"ldsc.py --h2 {input.gwasf} --ref-ld-chr {params.baseline} --w-ld-chr {params.weights} --out {params.odir}"



  rule baseline_ldsc_noi:
      input:
          gwasf=config_d['GWAS'] +"ldsc_input/{model}_{trait}_10_{h2}_{samplesize}.sumstats.gz",
          baselinef=expand(config_d['L2'] +"ukb_baseline/{{source}}.{{samplesize}}.{chrom}.l2.ldscore.gz",chrom=range(1,23)),
          baseline_l2m=expand(config_d['L2'] +"ukb_baseline/{{source}}.{{samplesize}}.{chrom}.l2.M",chrom=range(1,23)),
          baseline_l2m50=expand(config_d['L2'] +"ukb_baseline/{{source}}.{{samplesize}}.{chrom}.l2.M_5_50",chrom=range(1,23))
      output:
          dataf="results/sim_ukb_{source}/{model}_{trait}_10_{h2}_{samplesize}.noint.log"
      params:
          baseline=config_d['L2']+"ukb_baseline/{source}.{samplesize}.",
          weights=config_d['L2']+"ukb_baseline/{source}.{samplesize}.",#,config_d['WEIGHTS']+"weights.hm3_noMHC.",
          odir="results/sim_ukb_{source}/{model}_{trait}_10_{h2}_{samplesize}.noint"
      shell:
          config_d['LDSC']+"ldsc.py --h2 {input.gwasf} --ref-ld-chr {params.baseline} --w-ld-chr {params.weights} --no-intercept --out {params.odir}"




#+END_SRC

#+BEGIN_SRC snakemake :tangle ../workflow/rssp_snakefile

  rule rssp_quh_p:
      input:
          h5f=expand(config_d["LD_DIR"]+"ld_{{shrink}}_{{model}}/{{source}}_{{samplesize}}_chr{{chrom}}_{scatteritem}.h5",scatteritem=range(1,ldc+1)),
          gwasf=config_d['GWASDB'] +"gwas_h5/polym_{h2}_{samplesize}_sumstats.h5",
          snp_list=config_d["MODELD"]+"model_{samplesize}/{model}.txt"
      params:
          samplesize = "{samplesize}"
      output:
          oldf=expand(config_d['RSSPI'] +"{{shrink}}_{{source}}_chr{{chrom}}_{{model}}_{trait}_10_{{h2}}_{{samplesize}}.qs",trait=ntr)
      script:
          "../scripts/rssp_quh_est.R"




  rule sumstat2db:
      input:
         gwasf=config_d['GWAS'] +"ldsc_input/{model}_{trait}_10_{h2}_{samplesize}.sumstats.gz"
      output:
          output_d=config_d['GWASDB'] +"rssp_ss/{model}_{trait}_10_{h2}_{samplesize}.sumstats"
      script:
          "../scripts/sumstat2db.R"



  rule rssp_p:
      input:
          gwasf=expand(config_d['RSSPI'] +"{{shrink}}_{{source}}_chr{chrom}_{{model}}_{{trait}}_10_{{h2}}_{{samplesize}}.qs",chrom=range(1,23))
      params:
          samplesize = "{samplesize}"
      output:
          est_rdsf="results/sim_ukb_{source}/{model}_{trait}_10_{h2}_{samplesize}.{shrink}.RDS"
      script:
          "../scripts/rssp_est.R"


  rule rssp_o:
      input:
          h5f=config_d['GWAS']+"ldo_{shrink}/{source}_{samplesize}_chr19.h5",
          gwasf=config_d['GWAS'] +"ldsc_input/onec_{trait}_10_{h2}_{samplesize}.sumstats.gz"
      params:
          chroms=19,
          samplesize = "{samplesize}"
      output:
          est_rdsf="results/sim_ukb_{source}/onec_{trait}_{nt}_{nc}_{h2}_{samplesize}.{shrink}.RDS"
      script:
          "../scripts/rssp_est.R"


#+END_SRC

#+BEGIN_SRC snakemake :tangle ../workflow/ukb_snakefile

  def aggregate_input_io(wildcards):
      #checkpoint_output = checkpoints.plink_gwas_cov_o.get(nt=wildcards.nt,h2=wildcards.h2,samplesize=wildcards.samplesize)
      #nt = int(wildcards.nt)
      part_s = "results/sim_ukb_ind/onec_{{trait}}_10_{h2}_{samplesize}.hsq".format(
          h2=wildcards.h2,
          samplesize=wildcards.samplesize)
      out_fl_b = expand(part_s,
                        trait=range(1,10+1))    
      return out_fl_b

  def aggregate_input_ip(wildcards):
      #checkpoint_output = checkpoints.plink_gwas_cov_p.get(nt=wildcards.nt,h2=wildcards.h2,samplesize=wildcards.samplesize)
      #nt = int(wildcards.nt)
      part_s = "results/sim_ukb_ind/poly_{{trait}}_10_{h2}_{samplesize}.hsq".format(
          h2=wildcards.h2,
          samplesize=wildcards.samplesize)
      out_fl_b = expand(part_s,
                        trait=range(1,10+1))    
      return out_fl_b


  def aggregate_input_o(wildcards):
      #checkpoint_output = checkpoints.plink_gwas_cov_o.get(nt=wildcards.nt,h2=wildcards.h2,samplesize=wildcards.samplesize)
      #nt = int(wildcards.nt)
      part_s = "results/sim_ukb_{source}/onec_{{trait}}_10_{h2}_{samplesize}.{{inter}}".format(
          h2=wildcards.h2,
          source=wildcards.source,
          samplesize=wildcards.samplesize)
      out_fl_b = expand(part_s,
                        trait=range(1,10+1),
                        inter = ["int.log","noint.log","shrink.RDS","noshrink.RDS"])    
      return out_fl_b

  def aggregate_input_p(wildcards):
      #checkpoint_output = checkpoints.plink_gwas_cov_p.get(nt=wildcards.nt,h2=wildcards.h2,samplesize=wildcards.samplesize)
      #nt = int(wildcards.nt)
      part_s = "results/sim_ukb_{source}/poly_{{trait}}_10_{h2}_{samplesize}.{{inter}}".format(
          h2=wildcards.h2,
          source=wildcards.source,
          samplesize=wildcards.samplesize)
      out_fl_b = expand(part_s,
                        trait=range(1,10+1),
                        inter = ["int.log","noint.log","shrink.RDS","noshrink.RDS"])    
      return out_fl_b


  rule cat_filefo:
      input:
          aggregate_input_o
      output:
          config_d["GWAS"]+"gwas_covar_fl_{source}/onec_{h2}_{trait}_10_{samplesize}"
      shell:
          "echo {input} > {output}"


  rule cat_filefp:
      input:
          aggregate_input_p
      output:
          config_d["GWAS"]+"gwas_covar_fl_{source}/poly_{h2}_{trait}_10_{samplesize}"
      shell:
          "echo {input} > {output}"
        

  rule cat_fileio:
      input:
          aggregate_input_io
      output:
          config_d["GWAS"]+"gwas_covar_il_ind/onec_{h2}_{trait}_10_{samplesize}"
      shell:
          "echo {input} > {output}"

  rule cat_fileip:
      input:
          aggregate_input_ip
      output:
          config_d["GWAS"]+"gwas_covar_il_ind/poly_{h2}_{trait}_10_{samplesize}"
      shell:
          "echo {input} > {output}"

  rule cat_fileipo:
      input:
          config_d["GWAS"]+"gwas_covar_il_ind/{model}_{h2}_{trait}_10_{samplesize}",
          config_d["GWAS"]+"gwas_covar_fl_ind/{model}_{h2}_{trait}_10_{samplesize}",
          config_d["GWAS"]+"gwas_covar_fl_panel/{model}_{h2}_{trait}_10_{samplesize}"
      output:
          flag="{model}_{h2}_{trait}_10_{samplesize}.txt"
      shell:
          "echo {input} > {output}"


#+END_SRC

#+begin_src R :tangle ../scripts/sumstat2db.R
library(duckdb)
library(vroom)
library(dplyr)
library(ldmap)
gwasf <- snakemake@input[["gwasf"]]
output_d <- snakemake@output[["output_d"]]

con = dbConnect(duckdb::duckdb(), dbdir=output_d,read_only=FALSE)
sumstat_df <- vroom::vroom(gwasf) %>%
    mutate(rsid = rsid2int(SNP))

dbWriteTable(con,"gwas",sumstat_df)
gc()
dbDisconnect(con,shutdown=TRUE)
gc()
#+END_SRC


#+begin_src R :tangle ../scripts/rssp_est.R
  library(RSSp)
  library(dplyr)
  library(ldmap)
  library(ldshrink)
  library(EigenH5)
  library(purrr)

  input_f <- snakemake@input[["gwasf"]]
  stopifnot(!is.null(input_f))

  rssp_df <- map_df(input_f, qs::qread) %>% filter(D > 1e-5)
  Nf <- snakemake@input[["N"]]
  if(!is.null(Nf)){
    N <- qs::qread(Nf)
  }else{
    N <- snakemake@params[["samplesize"]]
    stopifnot(!is.null(N))
    N <- as.integer(N)
  }


  res_df <- RSSp::RSSp_estimate(
                    rssp_df$quh,
                    rssp_df$D,
                    sample_size = N,
                    p = nrow(rssp_df)
                  )
  saveRDS(res_df, snakemake@output[["est_rdsf"]])

#+end_src



#+begin_src R :tangle ../scripts/rssp_quh_est.R

  ## save.image("quh.RData")
  ## stop("oops!")

  ## load("quh.RData")
  library(RSSp)
  library(dplyr)
  library(EigenH5)
  library(ldmap)
  library(purrr)


  input_f <- snakemake@input[["h5f"]]
  sumstat_h5 <- snakemake@input[["gwasf"]]
                                          #snplist_f <- snakemake@input[["snp_list"]]
                                          #snplist_df <- tibble(rsid=rsid2int(scan(snplist_f,what=character())))

  offset_df <- read_df_h5(sumstat_h5,"ldmap_region_offset") %>% mutate(ldmr=ldetect_EUR[value])
  panel_size <- as.integer(snakemake@params[["samplesize"]] %||% 10000)

  oldf <- snakemake@output[["oldf"]]

  ncol_Z <- dim_h5(sumstat_h5,"Z")[2]

  read_snp_h5 <- function(file, ldmr_id) {
    tibble::tibble(snp_struct = read_vector_h5(file, paste0(ldmr_id, "/snp_struct")))
  }

  all_reg_df <- map_dfr(set_names(input_f, input_f), ~tibble(ldmr = ls_h5(.x)), .id = "file")


  read_r <- function(tldmr,tf) {

    sub_offset_df <- slice(offset_df,which(as.character(ldetect_EUR[offset_df$value])==tldmr))
    sumstat_df <- tibble(snp_struct=read_vector_h5(sumstat_h5,datapath="/snp_struct",offset=sub_offset_df$offset,datasize=sub_offset_df$datasize)) %>% 
      mutate(snp_pos=clear_alleles(snp_struct)) %>%
      mutate(Z=read_matrix_h5(sumstat_h5,"Z",offset=c(sub_offset_df$offset,0L),datasize=c(sub_offset_df$datasize,ncol_Z)))
    ld_gwas_df <- read_snp_h5(tf,tldmr) %>% mutate(snp_pos=clear_alleles(snp_struct)) %>% 
      left_join(sumstat_df,by="snp_pos",suffix=c("_ld","_gwas")) %>%
      mutate(ams=if_else(allele_match(snp_struct_ld,snp_struct_gwas)=="perfect_match",1,-1))  %>% 
      mutate(Z=ams*Z)
    if(sum(is.na(ld_gwas_df$Z))>0){
      ld_gwas_df$Z[is.na(ld_gwas_df$Z)] <- sample(ld_gwas_df$Z[!is.na(ld_gwas_df$Z)],sum(is.na(ld_gwas_df$Z)),replace=F)
      stopifnot(sum(is.na(ld_gwas_df$Z))==0)
    }

    ntr <- nrow(ld_gwas_df)
    cat(as.character(tldmr),"\n")

    if (exists_h5(tf, as.character(tldmr), "Q") && dim_h5(tf,paste0(tldmr,"/Q"))[1]==ntr) {
      sid <- read_vector_h5(tf, paste0(as.character(tldmr), "/D"))
      Q <- read_matrix_h5(tf, paste0(as.character(tldmr), "/Q"))
      D <- zapsmall(read_vector_h5(tf, paste0(as.character(tldmr), "/D")))
      Q <- Q[,seq_along(D)]
      ## R <- Q%*%(D*t(Q))
      ## diag(R) <- 1
    } else {
      save.image("quh.RData")
      stop(paste0("dim mismatch ",tf,": ",ntr,"!=",dim_h5(tf,paste0(tldmr,"/Q"))[1]," in ",as.character(tldmr)))
      ## R <- read_matrix_h5(tf, paste0(as.character(tldmr), "/R"))
      ## stopifnot(all(tdf$ld_id) %in% seq_len(nrow(R)))
      ## mR <- RSSp:::modify_R(R[tdf$ld_id, tdf$ld_id, drop = FALSE], tdf$Z, panel_size)
      ## ldvr <- eigen(mR)
      ## Q <- ldvr$vectors
      ## D <- ldvr$values
    }
    quh <- RSSp::convert_quh(ld_gwas_df$Z, Q)
    gc()
    if(any(is.na(quh))){
      save.image("quh.RData")
      stopifnot(all(!is.na(quh)))
    }
    tibble(quh = quh, D = zapsmall(D), ldmr = as.character(tldmr))
  }

  rssp_df <- map2_dfr(all_reg_df$ldmr,all_reg_df$file, read_r) %>% filter(D > 1e-5)
  for(i in seq_len(ncol(rssp_df$quh))){
    x <- rssp_df$quh[,i]
    tibble(quh=x,D=rssp_df$D,ldmr=rssp_df$ldmr) %>%   qs::qsave(oldf[i])
  }

#+end_src





#+BEGIN_SRC snakemake :tangle ../workflow/ukb_snakefile


  rule cat_grm_bin_h2:
      input:
          grm_bin=[config_d["GWAS"]+"split_grm_{model}_{samplesize}/grm.part_"+config_d["CHUNKN"]+"_{:02d}.grm.bin".format(i) for i in range(1,int(config_d["CHUNKN"])+1)]
      output:
          grm_bin=config_d["GWAS"]+"grm_{model}_{samplesize}/grm.grm.bin"
      shell:
          "cat {input.grm_bin} > {output.grm_bin}"

  rule cat_grm_N_bin_h2:
      input:
          grm_bin=[config_d["GWAS"]+"split_grm_{model}_{samplesize}/grm.part_"+config_d["CHUNKN"]+"_{:02d}.grm.N.bin".format(i) for i in range(1,int(config_d["CHUNKN"])+1)]
      output:
          grm_bin=config_d["GWAS"]+"grm_{model}_{samplesize}/grm.grm.N.bin"
      shell:
          "cat {input.grm_bin} > {output.grm_bin}"


  rule cat_grm_id_h2:
      input:
          grm_bin=[config_d["GWAS"]+"split_grm_{model}_{samplesize}/grm.part_"+config_d["CHUNKN"]+"_{:02d}.grm.id".format(i) for i in range(1,int(config_d["CHUNKN"])+1)]
      output:
          grm_id=config_d["GWAS"]+"grm_{model}_{samplesize}/grm.grm.id"
      shell:
          "cat {input.grm_bin} > {output.grm_id}"


  rule gcta_h2:
      input:
          grmf=config_d["GWAS"]+"grm_{model}_{samplesize}/grm.grm.bin",
          grm_id=config_d["GWAS"]+"grm_{model}_{samplesize}/grm.grm.id",
          grm_Nf=config_d["GWAS"]+"grm_{model}_{samplesize}/grm.grm.N.bin",
          phenof=config_d["GWAS"]+"pheno/{model}_{h2}_{trait}_10_{samplesize}.pheno",
          covarf=config_d["GWAS"]+"pca_{model}/{samplesize}_grm.eigenvec"
      params:
          grm_pref=config_d["GWAS"]+"grm_{model}_{samplesize}/grm",
          out_pref="results/sim_ukb_ind/{model}_{trait}_10_{h2}_{samplesize}",
          trait="{trait}"
      threads: 9
      output:
          out_f="results/sim_ukb_ind/{model}_{trait}_10_{h2}_{samplesize}.hsq",
          logf="results/sim_ukb_ind/{model}_{trait}_10_{h2}_{samplesize}.log"
      shell:
          "/gpfs/data/xhe-lab/software/spack/opt/spack/linux-rhel6-haswell/gcc-9.2.0/gcta-1.93.2beta-yz57zzuencwoygoiry6q62ab23tdpd27/bin/gcta64 --reml --grm {params.grm_pref} --pheno {input.phenof} --qcovar {input.covarf} --out {params.out_pref} --thread-num {threads}"

#+END_SRC

#+BEGIN_SRC snakemake :tangle ../workflow/old_grm_snakefile


  rule grmf:
      params:
          in_pref=expand(config_d["GWAS"]+"split_grm/chr{chrom}",chrom=genome_chr)
      output:
          outputf=temp("../params/merge_grm_{chri}.txt".format(chri=chrom_int))
      run:
          with open(output[0],"w") as out:
              for f in params.in_pref:
                  out.write(f.format(dataset=wildcards.dataset)+"\n")

  rule merge_grm:
      input:
          grm_bin=expand(config_d["GWAS"]+"split_grm/chr{chrom}.grm.bin",chrom=genome_chr),
          grm_id=expand(config_d["GWAS"]+"split_grm/chr{chrom}.grm.id",chrom=genome_chr),
          grm_Nf=expand(config_d["GWAS"]+"split_grm/chr{chrom}.grm.N.bin",chrom=genome_chr),
          mf=rules.grmf.output.outputf
      params:
          out_pref=config_d["GWAS"]+"grm/chr{chri}".format(chri=chrom_int)
      output:
          grmf=temp(config_d["GWAS"]+"grm/chr{chri}.grm.bin".format(chri=chrom_int)),
          grm_id=temp(config_d["GWAS"]+"grm/chr{chri}.grm.id".format(chri=chrom_int)),
          grm_Nf=temp(config_d["GWAS"]+"grm/chr{chri}.grm.N.bin".format(chri=chrom_int))
      shell:
          "/gpfs/data/xhe-lab/software/spack/opt/spack/linux-rhel6-haswell/gcc-9.2.0/gcta-1.93.2beta-yz57zzuencwoygoiry6q62ab23tdpd27/bin/gcta64 --mgrm-bin {input.mf} --make-grm --out {params.out_pref}"
#+END_SRC


#+BEGIN_SRC R :tangle ../scripts/summarise_gcta.R

library(purrr)
library(readr)
library(dplyr)

inf <- snakemake@input[["in_f"]]
fgeneid <- snakemake@params[["gene"]]
outf <- snakemake@output[["out_f"]]

stopifnot(!is.null(outf),!is.null(fgeneid),length(inf)==length(fgeneid))
map2_dfr(inf,fgeneid,~read_delim(.x,delim="\t") %>% mutate(fgeneid=.y)) %>% write_delim(outf,delim="\t")

#+END_SRC



#+BEGIN_SRC R :tangle ../scripts/summarise_all.Rmd

  ldscf <- fs::dir_ls("/home/nwknoblauch/Dropbox/PolygenicRSS/workflow/results/sim_ukb/", glob="*log")
  rsspf <- fs::dir_ls("/home/nwknoblauch/Dropbox/PolygenicRSS/workflow/results/sim_ukb/", glob="*RDS")
  gctaf <- fs::dir_ls("/home/nwknoblauch/Dropbox/PolygenicRSS/workflow/gcta_h2_est/", glob="*hsq")



  library(purrr)
  library(readr)
  library(dplyr)
  library(ggplot2)


  parse_ldsc_h2log <- function(h2lf){
      h2_dat <- scan(h2lf,what=character(), sep = "\n")
      h2_rowi <- grep("Total Observed scale", h2_dat)
      h2_row <- h2_dat[h2_rowi]
      h2_data <- h2_dat[h2_rowi:length(h2_dat)]
      h2_data <- h2_data[grep("^[^:]+:[^:]+$", h2_data)]
      h2_datd <- purrr::transpose(strsplit(h2_data, split=":"))
      names(h2_datd) <- c("Variable", "Value")
      h2_datdf <- tidyr::unnest(as_data_frame(h2_datd)) %>%
          dplyr::mutate(Variable=chartr(" ^", "__", Variable), Value = trimws(Value)) %>%
        tidyr::separate(Value, c("Est", "SD"), sep = "[ s\\(\\)]+", remove = T, fill = "right", convert = T)
      tibble(h2=h2_datdf$Est[1],h2_sd=h2_datdf$SD[1],Lambda_GC=h2_datdf$Est[2],Mean_Chi_2=h2_datdf$Est[3],Intercept=h2_datdf$Est[4],Intercept_sd=h2_datdf$SD[4])
  }

  parse_logf <- function(x){
    ret <- as.numeric(stringr::str_split_fixed(fs::path_ext_remove(fs::path_file(x)),pattern="_",n=4))
    tibble::tibble(rep=ret[1],rep_total=ret[2],num_pcs=ret[3],true_h2=ret[4])
  }

  parse_gctalf <- function(x){
      ret <- as.numeric(stringr::str_split_fixed(fs::path_ext_remove(fs::path_file(x)),pattern="_",n=3))
      tibble::tibble(true_h2=ret[1],rep=ret[2],rep_total=ret[3])
  }

  parse_gcta <- function(x){
    tdf <- read_tsv(x)
    select(tdf,-SE) %>% mutate(row=1) %>% tidyr::spread(Source,Variance) %>%
      rename(h2=`V(G)/Vp`) %>% mutate(h2_sd=tdf$SE[4]) %>% select(h2,h2_sd,Pval,n)
  }



  ldscf <- snakemake@input[["ldscf"]]
  gctaf <- snakemake@input[["gctaf"]]
  rsspf <- snakemake@input[["rsspf"]]



  ldsc_df <- map_df(ldscf,~bind_cols(parse_ldsc_h2log(.x),parse_logf(.x)))
  gcta_df <- map_df(gctaf,~bind_cols(parse_gcta(.x),parse_gctalf(.x)))
  rssp_df <- map_df(rsspf,~bind_cols(readRDS(.x),parse_logf(.x)))

  check_df <- bind_rows(transmute(rssp_df,h2=pve,rep=rep,true_h2=true_h2,method="RSSp"),
                        transmute(ldsc_df,h2=h2,rep=rep,true_h2=true_h2,method="ldsc"),
                        transmute(gcta_df,h2=h2,rep=rep,true_h2=true_h2,method="GCTA"))




#+END_SRC
