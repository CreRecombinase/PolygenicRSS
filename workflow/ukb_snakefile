rule nodup_snplist:
  """ Generate a de-duplicated list of variants from the original snp list"""
    input:
        bimf = config_d["UKB_BGEN"] + "ukb_mfi_chr{chrom}_v3.txt.gz"
    params:
        host = "gardner"
    output:
        snplistf = config_d["SNPLIST_D"]+"chr{chrom}_01.txt"
    script:
        "../scripts/uniq_bim.R"

rule index_bgen:
  """Index bgen file"""
    input:
        ukb_bgen = ancient(config_d["UKB_BGEN"] + "ukb_imp_chr{chrom}_v3.bgen")
    output:
        config_d["UKB_BGEN"] + "ukb_imp_chr{chrom}_v3.bgen.bgi"
    shell:
        "/gpfs/data/xhe-lab/software/spack/opt/spack/linux-rhel6-haswell/gcc-9.2.0/bgen-default-f3kwhoklsgjdeojgjjzt6g4d5bqqmttt/bin/bgenix -g {input.ukb_bgen} -index -clobber"

rule index_ss_bgen:
  """ Index common var bgen file"""
    input:
        ukb_bgen = config_d["UKB_PED"]+"chr{chrom}_"+config_d["SAMPLEN"]+"_01.bgen"
    output:
        config_d["UKB_PED"]+"chr{chrom}_"+config_d["SAMPLEN"]+"_01.bgen.bgi"
    shell:
        "/gpfs/data/xhe-lab/software/spack/opt/spack/linux-rhel6-haswell/gcc-9.2.0/bgen-default-f3kwhoklsgjdeojgjjzt6g4d5bqqmttt/bin/bgenix -g {input.ukb_bgen} -index -clobber"

rule index_ss_bgen2:
  """ Index common var bgen file in gwas cohort or LD cohort (sub or panel)"""
    input:
        ukb_bgen = config_d["UKB_PED"]+"{ps}/chr{chrom}_"+config_d["SAMPLEN"]+"_01.bgen"
    output:
        config_d["UKB_PED"]+"{ps}/chr{chrom}_"+config_d["SAMPLEN"]+"_01.bgen.bgi"
    shell:
        "/gpfs/data/xhe-lab/software/spack/opt/spack/linux-rhel6-haswell/gcc-9.2.0/bgen-default-f3kwhoklsgjdeojgjjzt6g4d5bqqmttt/bin/bgenix -g {input.ukb_bgen} -index -clobber"

rule index_ss_bgen3:
    """ Index bgen file in gwas cohort or LD cohort (sub or panel)"""
    input:
        ukb_bgen = config_d["UKB_PED"]+"{ps}/chr{chrom}_"+config_d["SAMPLEN"]+".bgen"
    output:
        config_d["UKB_PED"]+"{ps}/chr{chrom}_"+config_d["SAMPLEN"]+".bgen.bgi"
    shell:
        "/gpfs/data/xhe-lab/software/spack/opt/spack/linux-rhel6-haswell/gcc-9.2.0/bgen-default-f3kwhoklsgjdeojgjjzt6g4d5bqqmttt/bin/bgenix -g {input.ukb_bgen} -index -clobber"

rule ss_bgenix:
  """Subset the original BGEN genotype data to only loci with unique IDs"""
    input:
        ukb_bgen = ancient(config_d["UKB_BGEN"] + "ukb_imp_chr{chrom}_v3.bgen"),
        snplistf = config_d["SNPLIST_D"]+"chr{chrom}_01.txt"
    output:
        target_bgen = config_d["SNPLIST_D"]+"chr{chrom}_01.bgen"
    shell:
        "/gpfs/data/xhe-lab/software/spack/opt/spack/linux-rhel6-haswell/gcc-9.2.0/bgen-default-f3kwhoklsgjdeojgjjzt6g4d5bqqmttt/bin/bgenix -g {input.ukb_bgen} -incl-rsids {input.snplistf} > {output.target_bgen}"


rule sub_bgen_idx:
  """Index the common variant bgen file"""
    input:
        bgen = config_d["SNPLIST_D"]+"chr{chrom}_01.bgen"
    output:
        config_d["SNPLIST_D"]+"chr{chrom}_01.bgen.bgi"
    shell:
        "/gpfs/data/xhe-lab/software/spack/opt/spack/linux-rhel6-haswell/gcc-9.2.0/bgen-default-f3kwhoklsgjdeojgjjzt6g4d5bqqmttt/bin/bgenix -g {input} -index -clobber"


rule independent_variants_bgi:
  """Read the bgen index (it's a sqlite file) to get variants that aren't duplicated"""
    input:
        a_dbf = expand(config_d["UKB_PED"]+"{{ps}}/chr{chrom}_"+config_d["SAMPLEN"]+".bgen.bgi",chrom=genome_chr)
    output:
        singlef = config_d["UKB_PED"]+"{ps}/uniq_vars_"+config_d["SAMPLEN"]+".txt"
    script:
        "../scripts/ind_vars_db.R"

rule tbgen2bgen:
  """Pull out sample or panel samples from common variant subset.  Do so in chunks (24 chunks per chromosome).  Sample subset is really slow for bgenix, so the chunks speed it up"""
    input:
        bgen = config_d["SNPLIST_D"]+"chr{chrom}_01.bgen",
        bgeni = config_d["SNPLIST_D"]+"chr{chrom}_01.bgen.bgi",
        bgf="splitted/chr{chrom}_{scatteritem}.txt",
        samplef= config_d["UKB_SAMPLE"],
        singlef = config_d["GWAS"]+"grm_cut/{ps}_"+config_d["SAMPLEN"]+".txt"
    output:
        bgenf = temp(config_d["UKB_PED"]+"{ps}/chr{chrom}_01_"+config_d["SAMPLEN"]+"_tmp_{scatteritem}.bgen")
    threads: 1
    shell:
        config_d["BGENIXCMD"]+" -g {input.bgen} -incl-range {input.bgf} | "+config_d["QCTCMD"]+" -g - -s {input.samplef} -incl-samples <(cut -f 1 {input.singlef}) -filetype bgen -bgen-bits 8 -og {output.bgenf} -bgen-compression zstd -threads {threads}"

rule cbgen2bgen:
    """Condense chunks per-chromosome."""
    input:
        expand(config_d["UKB_PED"]+"{{ps}}/chr{{chrom}}_01_"+config_d["SAMPLEN"]+"_tmp_{scatteritem}.bgen",scatteritem=range(24))
    output:
        config_d["UKB_PED"]+"{ps}/chr{chrom}_"+config_d["SAMPLEN"]+".bgen"
    shell:
        "/gpfs/data/xhe-lab/software/spack/opt/spack/linux-rhel6-haswell/gcc-9.2.0/bgen-default-f3kwhoklsgjdeojgjjzt6g4d5bqqmttt/bin/cat-bgen -g {input} -og {output}"


rule gen_sample_bgen:
  """Generates sample list from bgen"""
    input:
        inpf=config_d["UKB_PED"]+"{ps}/chr{chrom}_"+config_d["SAMPLEN"]+".bgen"
    output:
        onpf=temp(config_d["UKB_PED"]+"{ps}/chr{chrom}_"+config_d["SAMPLEN"]+".temp_sample")
    shell:
        config_d["QCTCMD"]+" -g {input.inpf} -os {output.onpf}"

rule rgen_sample_bgen:
  """Adds sex info to bgen sample file"""
    input:
        onpf=config_d["UKB_PED"]+"{ps}/chr{chrom}_"+config_d["SAMPLEN"]+".temp_sample",
        samplef= config_d["UKB_SAMPLE"],
    output:
        onpf=config_d["UKB_PED"]+"{ps}/chr{chrom}_"+config_d["SAMPLEN"]+".sample"
    script:
        "../scripts/add_sex.R"

rule bgensplit_inp:
  """Split each chromosome into 24 chunks according to LDetect blocks.  This step is for computational purposes only"""
    params:
        chrom="{chrom}"
    output:
        ldmap_rs=expand("splitted/chr{{chrom}}_{scatteritem}.txt",scatteritem=range(24))
    script:
        "../scripts/bgen_zlib2zstd_input.R"

# #
# #target_bgen = config_d["UKB_BGEN"] + "ukb_imp_chr{chrom}_v3.bgen",
# rule subset_bgen_qctool:
#     input:
#         target_bgen = config_d["SNPLIST_D"]+"chr{chrom}_01_zstd.bgen",
#         samplef= config_d["UKB_SAMPLE"],
#         singlef=config_d["GWAS"]+"grm_cut/{ps}_"+config_d["SAMPLEN"]+".txt"
#     params:
#         bgen = config_d["UKB_PED"]+"{ps}/chr{chrom}_"+config_d["SAMPLEN"]
#     output:
#         target_bgen = config_d["UKB_PED"]+"{ps}/chr{chrom}_"+config_d["SAMPLEN"]+".bgen",
#         target_ss = config_d["UKB_PED"]+"{ps}/chr{chrom}_"+config_d["SAMPLEN"]+".sumstats",
#         target_sample = config_d["UKB_PED"]+"{ps}/chr{chrom}_"+config_d["SAMPLEN"]+".sample"
#     threads: 12
#     shell:
#         config_d["QCTCMD"]+" -g {input.target_bgen}  -incl-samples <(cut -f 1 {input.singlef}) -og {output.target_bgen} -os {output.target_sample} -snp-stats -osnp {output.target_ss} -bgen-compression \"zstd\" -threads {threads}"


# rule subset_bgen_bgen:
#     input:
#         ukb_bgen = config_d["UKB_PED"]+"chr{chrom}_"+config_d["SAMPLEN"]+".bgen",
#         samplen = config_d["UKB_PED"]+"chr{chrom}_"+config_d["SAMPLEN"]+".sample"
#     params:
#         op = "chr{chrom}_"+config_d["SAMPLEN"]+"_01",
#         bgen = config_d["UKB_PED"]+"chr{chrom}_"+config_d["SAMPLEN"]+"_01"
#     output:
#         target_bgen = config_d["UKB_PED"]+"chr{chrom}_"+config_d["SAMPLEN"]+"_01.bgen"
#     threads: 4
#     shell:
#         "/gpfs/data/xhe-lab/software/spack/opt/spack/linux-rhel6-haswell/gcc-9.2.0/plink2-master-cy4i77vbnkwgzpc56eaghkq27shwgcam/bin/plink2 --bgen {input.ukb_bgen} ref-first --maf 0.01  --export bgen-1.3 --out {output.target_bgen} --threads {threads}"


rule make_bfile_list:
  """Creates a file that has the list of bgens that will go into gcta_p_grm.  Doesn't need to be run on the cluster"""
    input:
        bgf=expand(config_d["UKB_PED"]+"{{ps}}/chr{chrom}_"+config_d["SAMPLEN"]+".bgen",chrom=genome_chr)
    params:
        gch=genome_chr
    output:
        output_f=temp("{ps}/file_list.txt")
    run:
        with open(output[0],"w") as out:
            for fn in input.bgf:
                out.write(fn+"\n")

rule bgen2plink:
  """Convert bgen to plink"""
    input:
        ukb_sample = config_d["UKB_SAMPLE"],
        target_bgen = config_d["UKB_PED"]+"chr{chrom}.bgen"
    params:
        output_p = config_d["UKB_PED"]+"chr{chrom}"
    output:
        target_bim = config_d["UKB_PED"]+"chr{chrom}.bim",
        target_bed = config_d["UKB_PED"]+"chr{chrom}.bed",
        target_fam = config_d["UKB_PED"]+"chr{chrom}.fam"
    shell:
        "/gpfs/data/xhe-lab/software/spack/opt/spack/linux-rhel6-haswell/gcc-9.2.0/plink2-master-cy4i77vbnkwgzpc56eaghkq27shwgcam/bin/plink2 --sample {input.ukb_sample} --bgen {input.target_bgen}  --make-bed --out {params.output_p}"


# rule cat_bgen_bgen:
#     input:
#         target_bgen = expand(config_d["UKB_PED"]+"chr{chrom}_"+config_d["SAMPLEN"]+".bgen",chrom=range(1,23)),
#         ukb_sample = config_d["UKB_SAMPLE"]
#     output:
#         target_bgen = config_d["UKB_PED"]+"all.bgen"
#     shell:
#         "/gpfs/data/xhe-lab/software/spack/opt/spack/linux-rhel6-haswell/gcc-9.2.0/bgen-default-f3kwhoklsgjdeojgjjzt6g4d5bqqmttt/bin/cat-bgen -g {input.target_bgen} -og {output.target_bgen}"

# rule all_bgen2plink:
#     input:
#         ukb_sample = config_d["UKB_SAMPLE"] ,
#         target_bgen = config_d["UKB_PED"]+"all.bgen"
#     params:
#         output_p = config_d["UKB_PED"]+"all"
#     output:
#         target_bim = config_d["UKB_PED"]+"all.bim",
#         target_bed = config_d["UKB_PED"]+"all.bed",
#         target_fam = config_d["UKB_PED"]+"all.fam"
#     shell:
#         "/gpfs/data/xhe-lab/software/spack/opt/spack/linux-rhel6-haswell/gcc-9.2.0/plink2-master-cy4i77vbnkwgzpc56eaghkq27shwgcam/bin/plink2 --sample {input.ukb_sample} --bgen {input.target_bgen} ref-last --make-bed --out {params.output_p}"



# rule all_sub_plink:
#     input:
#         famf=config_d["UKB_PED"]+"all.fam",
#         bimf=config_d["UKB_PED"]+"all.bim",
#         bedf=config_d["UKB_PED"]+"all.bed",
#         sample_f= config_d["GWAS"]+"grm_cut/sub_"+config_d["SAMPLEN"]+".txt"
#     params:
#         ip=config_d["UKB_PED"]+"all",
#         op=config_d["UKB_PED"]+"all_"+config_d["SAMPLEN"]
#     output:
#         famf=temp(config_d["UKB_PED"]+"t_all_"+config_d["SAMPLEN"]+".fam"),
#         bimf=temp(config_d["UKB_PED"]+"t_all_"+config_d["SAMPLEN"]+".bim"),
#         bedf=temp(config_d["UKB_PED"]+"t_all_"+config_d["SAMPLEN"]+".bed")
#     shell:
#         "/gpfs/data/xhe-lab/software/spack/opt/spack/linux-rhel6-haswell/gcc-9.2.0/plink2-master-cy4i77vbnkwgzpc56eaghkq27shwgcam/bin/plink2 --bfile {params.ip} --keep {input.sample_f} --make-bed --out {params.op}"

# rule all_gen_grm:
#     input:
#         famf=config_d["UKB_PED"]+"all_"+config_d["SAMPLEN"]+".fam",
#         bimf=config_d["UKB_PED"]+"all_"+config_d["SAMPLEN"]+".bim",
#         bedf=config_d["UKB_PED"]+"all_"+config_d["SAMPLEN"]+".bed"
#     params:
#         in_pref=config_d["UKB_PED"]+"all_"+config_d["SAMPLEN"]+"",
#         out_pref=config_d["GWAS"]+"split_grm/grm",
#         chunks_tot=config_d["CHUNKN"],
#         chunk_i="{i}"
#     output:
#         grm_bin=config_d["GWAS"]+"split_grm/grm.grm.bin.{i}",
#         grm_Nf= config_d["GWAS"]+"split_grm/grm.grm.N.bin.{i}"
#     shell:
#         "/gpfs/data/xhe-lab/software/spack/opt/spack/linux-rhel6-haswell/gcc-9.2.0/plink2-master-cy4i77vbnkwgzpc56eaghkq27shwgcam/bin/plink2 --bfile {params.in_pref} --make-grm-bin --parallel {params.chunk_i} {params.chunks_tot} --out {params.out_pref} --threads {threads}"





rule gcta_p_grm:
  """ Generate a GRM on the 12000 sample subsets, chunked in 50 steps"""
    input:
        ff="{ps}/file_list.txt",
        bgff=expand(config_d["UKB_PED"]+"{{ps}}/chr{chrom}_"+config_d["SAMPLEN"]+".bgen",chrom=genome_chr),
        bgix=expand(config_d["UKB_PED"]+"{{ps}}/chr{chrom}_"+config_d["SAMPLEN"]+".bgen.bgi",chrom=genome_chr),
        samplef=config_d["UKB_PED"]+"{ps}/chr1_"+config_d["SAMPLEN"]+".sample"
    params:
        out_pref=config_d["GWAS"]+"split_grm/{ps}/grm",
        chunks_tot=config_d["CHUNKN"],
        chunk_i="{i}"
    output:
        grm_bf= config_d["GWAS"]+"split_grm/{ps}/grm.part_"+config_d["CHUNKN"]+"_{i}.grm.id",
        grm_Nf= config_d["GWAS"]+"split_grm/{ps}/grm.part_"+config_d["CHUNKN"]+"_{i}.grm.bin",
        grm_idf= config_d["GWAS"]+"split_grm/{ps}/grm.part_"+config_d["CHUNKN"]+"_{i}.grm.N.bin"
    threads: 1
    shell:
        "/gpfs/data/xhe-lab/software/spack/opt/spack/linux-rhel6-haswell/gcc-9.2.0/gcta-1.93.2beta-yz57zzuencwoygoiry6q62ab23tdpd27/bin/gcta64 --mbgen {input.ff} --maf 0.01 --sample {input.samplef} --make-grm-part {params.chunks_tot} {params.chunk_i} --out {params.out_pref} --threads {threads}"



rule gcta_si_grm:
    """ Generate a GRM on the 10000 sample subsets (technically you can change this), chunked in 50 steps"""
    input:
        famf=config_d["UKB_PED"]+"all_{samplesize}_ind.fam",
        bimf=config_d["UKB_PED"]+"all_{samplesize}_ind.bim",
        bedf=config_d["UKB_PED"]+"all_{samplesize}_ind.bed",
        snp_list=config_d["MODELD"]+"model_{samplesize}/{model}.txt",
    params:
        in_pref=config_d["UKB_PED"]+"all_{samplesize}_ind",
        out_pref=config_d["GWAS"]+"split_grm_{model}_{samplesize}/grm",
        chunks_tot=config_d["CHUNKN"],
        chunk_i="{i}"
    output:
        grm_bf= config_d["GWAS"]+"split_grm_{model}_{samplesize}/grm.part_"+config_d["CHUNKN"]+"_{i}.grm.id",
        grm_Nf= config_d["GWAS"]+"split_grm_{model}_{samplesize}/grm.part_"+config_d["CHUNKN"]+"_{i}.grm.bin",
        grm_idf= config_d["GWAS"]+"split_grm_{model}_{samplesize}/grm.part_"+config_d["CHUNKN"]+"_{i}.grm.N.bin"
    threads: 1
    shell:
        "/gpfs/data/xhe-lab/software/spack/opt/spack/linux-rhel6-haswell/gcc-9.2.0/gcta-1.93.2beta-yz57zzuencwoygoiry6q62ab23tdpd27/bin/gcta64 --bfile {params.in_pref} --extract {input.snp_list} --make-grm-part {params.chunks_tot} {params.chunk_i} --out {params.out_pref} --threads {threads}"




# rule all_gen_grm_id:
#     input:
#         famf=config_d["UKB_PED"]+"all_"+config_d["SAMPLEN"]+".fam",
#         bimf=config_d["UKB_PED"]+"all_"+config_d["SAMPLEN"]+".bim",
#         bedf=config_d["UKB_PED"]+"all_"+config_d["SAMPLEN"]+".bed"
#     params:
#         in_pref=config_d["UKB_PED"]+"all_"+config_d["SAMPLEN"]+"",
#         out_pref=config_d["GWAS"]+"grm/grm",
#         chunks_tot="950",
#         chunk_i="949"
#     output:
#         grm_bin=temp(config_d["GWAS"]+"grm/grm.grm.bin.949"),
#         grm_Nf= config_d["GWAS"]+"grm/grm.grm.id"
#     shell:
#         "/gpfs/data/xhe-lab/software/spack/opt/spack/linux-rhel6-haswell/gcc-9.2.0/plink2-master-cy4i77vbnkwgzpc56eaghkq27shwgcam/bin/plink2 --bfile {params.in_pref} --make-grm-list --parallel {params.chunk_i} {params.chunks_tot} --out {params.out_pref} --threads {threads}"




# rule gcta_si_grm:
#     input:
#         famf=config_d["UKB_PED"]+"all_{samplesize}_ind.fam",
#         bimf=config_d["UKB_PED"]+"all_{samplesize}_ind.bim",
#         bedf=config_d["UKB_PED"]+"all_{samplesize}_ind.bed",
#         snp_list=config_d["MODELD"]+"model_{samplesize}/{model}.txt",
#     params:
#         in_pref=config_d["UKB_PED"]+"all_{samplesize}_ind",
#         out_pref=config_d["GWAS"]+"split_grm_{model}_{samplesize}/grm",
#         chunks_tot=config_d["CHUNKN"],
#         chunk_i="{i}"
#     output:
#         grm_bf= config_d["GWAS"]+"split_grm_{model}_{samplesize}/grm.part_"+config_d["CHUNKN"]+"_{i}.grm.id",
#         grm_Nf= config_d["GWAS"]+"split_grm_{model}_{samplesize}/grm.part_"+config_d["CHUNKN"]+"_{i}.grm.bin",
#         grm_idf= config_d["GWAS"]+"split_grm_{model}_{samplesize}/grm.part_"+config_d["CHUNKN"]+"_{i}.grm.N.bin"
#     threads: 1
#     shell:
#         "/gpfs/data/xhe-lab/software/spack/opt/spack/linux-rhel6-haswell/gcc-9.2.0/gcta-1.93.2beta-yz57zzuencwoygoiry6q62ab23tdpd27/bin/gcta64 --bfile {params.in_pref} --extract {input.snp_list} --make-grm-part {params.chunks_tot} {params.chunk_i} --out {params.out_pref} --threads {threads}"




rule cat_grm_bin_p:
    input:
        grm_bin=[config_d["GWAS"]+"split_grm/panel/grm.part_"+config_d["CHUNKN"]+"_{:02d}.grm.bin".format(i) for i in range(1,int(config_d["CHUNKN"])+1)]
    output:
        grm_bin=config_d["GWAS"]+"grm/panel/grm.grm.bin"
    shell:
        "cat {input.grm_bin} > {output.grm_bin}"


rule cat_grm_bin_s:
    input:
        grm_bin=[config_d["GWAS"]+"split_grm/sub/grm.part_"+config_d["CHUNKN"]+"_{:02d}.grm.bin".format(i) for i in range(1,int(config_d["CHUNKN"])+1)]
    output:
        grm_bin=config_d["GWAS"]+"grm/sub/grm.grm.bin"
    shell:
        "cat {input.grm_bin} > {output.grm_bin}"        

rule cat_grm_N_bin:
    input:
        grm_bin=[config_d["GWAS"]+"split_grm/{ps}/grm.part_"+config_d["CHUNKN"]+"_{:02d}.grm.N.bin".format(i) for i in range(1,int(config_d["CHUNKN"])+1)]
    output:
        grm_bin=config_d["GWAS"]+"grm/{ps}/grm.grm.N.bin"
    shell:
        "cat {input.grm_bin} > {output.grm_bin}"


rule cat_grm_id:
    input:
        grm_bin=[config_d["GWAS"]+"split_grm/{ps}/grm.part_"+config_d["CHUNKN"]+"_{:02d}.grm.id".format(i) for i in range(1,int(config_d["CHUNKN"])+1)]
    output:
        grm_id=config_d["GWAS"]+"grm/{ps}/grm.grm.id"
    shell:
        "cat {input.grm_bin} > {output.grm_id}"


rule cut_grm_s:
    input:
        grm_bin=config_d["GWAS"]+"grm/sub/grm.grm.bin",
        grm_id=config_d["GWAS"]+"grm/sub/grm.grm.id",
    params:
        in_pref=config_d["GWAS"]+"grm/sub/grm",
        cut="0.05",
        cut_pref=config_d["GWAS"]+"grm_cut/sub/grm"
    output:
        singlef=config_d["GWAS"]+"grm_cut/sub/grm.singleton.txt",
        fam_f=config_d["GWAS"]+"grm_cut/sub/grm.family.txt",
        log_f=config_d["GWAS"]+"grm_cut/sub/grm.log"
    shell:
        "/gpfs/data/xhe-lab/software/spack/opt/spack/linux-rhel6-haswell/gcc-9.2.0/gcta-1.93.2beta-yz57zzuencwoygoiry6q62ab23tdpd27/bin/gcta64 --grm {params.in_pref} --grm-singleton {params.cut} --out {params.cut_pref}"


rule cut_grm_p:
    input:
        grm_bin=config_d["GWAS"]+"grm/panel/grm.grm.bin",
        grm_id=config_d["GWAS"]+"grm/panel/grm.grm.id",
    params:
        in_pref=config_d["GWAS"]+"grm/panel/grm",
        cut="0.05",
        cut_pref=config_d["GWAS"]+"grm_cut/panel/grm"
    output:
        singlef=config_d["GWAS"]+"grm_cut/panel/grm.singleton.txt",
        fam_f=config_d["GWAS"]+"grm_cut/panel/grm.family.txt",
        log_f=config_d["GWAS"]+"grm_cut/panel/grm.log"
    shell:
        "/gpfs/data/xhe-lab/software/spack/opt/spack/linux-rhel6-haswell/gcc-9.2.0/gcta-1.93.2beta-yz57zzuencwoygoiry6q62ab23tdpd27/bin/gcta64 --grm {params.in_pref} --grm-singleton {params.cut} --out {params.cut_pref}"



rule sub_ukb_s:
    input:
        singlef=rules.cut_grm_s.output.singlef
    params:
        samplesize="{samplesize}"
    output:
        singlef=config_d["GWAS"]+"grm_cut/sub_{samplesize}.txt",
        samplef=config_d["GWAS"]+"grm_cut/sub_{samplesize}.sample"
    shell:
        "grep -v '^-' {input.singlef} | shuf -n {params.samplesize}  > {output.singlef} && cut -f 1 {output.singlef} > {output.samplef}"


rule sub_ukb_p:
    input:
        singlef=rules.cut_grm_p.output.singlef
    params:
        samplesize="{samplesize}"
    output:
        singlef=config_d["GWAS"]+"grm_cut/panel_{samplesize}.txt",
        samplef=config_d["GWAS"]+"grm_cut/panel_{samplesize}.sample"
    shell:
        "grep -v '^-' {input.singlef} | shuf -n {params.samplesize}  > {output.singlef} && cut -f 1 {output.singlef} > {output.samplef}"







rule subset_bgen_panel:
  input:
      bgf=config_d["UKB_PED"]+"panel/chr{chrom}_"+config_d["SAMPLEN"]+".bgen",
      grm_id=rules.sub_ukb_p.output.samplef
  params:
      out_pref=config_d["UKB_PED"]+"panel/chr{chrom}_{samplesize}_01_ind"
  output:
      bgf=config_d["UKB_PED"]+"panel/chr{chrom}_{samplesize}_01_ind.bgen",
      samplef=config_d["UKB_PED"]+"panel/chr{chrom}_{samplesize}_01_ind.sample"
  shell:
      config_d["QCTCMD"]+" -g {input.bgf} -incl-samples {input.grm_id} -og {output.bgf} -os {output.samplef} -bgen-compression \"zstd\" "

rule subset_bgen_sub:
  input:
      bgf=config_d["UKB_PED"]+"sub/chr{chrom}_"+config_d["SAMPLEN"]+".bgen",
      grm_id=rules.sub_ukb_s.output.samplef
  params:
      out_pref=config_d["UKB_PED"]+"sub/chr{chrom}_{samplesize}_01_ind"
  output:
      bgf=config_d["UKB_PED"]+"sub/chr{chrom}_{samplesize}_01_ind.bgen",
      samplef=config_d["UKB_PED"]+"sub/chr{chrom}_{samplesize}_01_ind.sample"
  shell:
      config_d["QCTCMD"]+" -g {input.bgf} -incl-samples {input.grm_id} -og {output.bgf} -os {output.samplef} -bgen-compression \"zstd\" "



rule cat_bgen2:
    input:
        target_bgen=expand(config_d["UKB_PED"]+"sub/chr{chrom}_{{samplesize}}_01_ind.bgen",chrom=genome_chr)
    output:
        config_d["UKB_PED"]+"all_{samplesize}_01_ind.bgen"
    shell:
        "/gpfs/data/xhe-lab/software/spack/opt/spack/linux-rhel6-haswell/gcc-9.2.0/bgen-default-f3kwhoklsgjdeojgjjzt6g4d5bqqmttt/bin/cat-bgen -g {input.target_bgen} -og {output}"

rule cat_bgen_panel:
    input:
        target_bgen=expand(config_d["UKB_PED"]+"panel/chr{chrom}_{{samplesize}}_01_ind.bgen",chrom=genome_chr)
    output:
        config_d["UKB_PED"]+"split_map/temppanel_{samplesize}_01_ind.bgen"
    shell:
        "/gpfs/data/xhe-lab/software/spack/opt/spack/linux-rhel6-haswell/gcc-9.2.0/bgen-default-f3kwhoklsgjdeojgjjzt6g4d5bqqmttt/bin/cat-bgen -g {input.target_bgen} -og {output}"

rule sub_grm:
    input:
        singlef=config_d["GWAS"]+"grm_cut/sub_{samplesize}.txt",
        grmf=config_d["GWAS"]+"grm/sub/grm.grm.bin",
        grm_id=config_d["GWAS"]+"grm/sub/grm.grm.id",
        grm_binf=config_d["GWAS"]+"grm/sub/grm.grm.N.bin"
    params:
        ip=config_d["GWAS"]+"grm/sub/grm",
        op=config_d["GWAS"]+"grm_cut/{samplesize}_grm"
    output:
        grmf=config_d["GWAS"]+"grm_cut/{samplesize}_grm.grm.bin",
        grm_Nf=config_d["GWAS"]+"grm_cut/{samplesize}_grm.grm.N.bin",
        grm_id=config_d["GWAS"]+"grm_cut/{samplesize}_grm.grm.id"
    shell:
        "/gpfs/data/xhe-lab/software/spack/opt/spack/linux-rhel6-haswell/gcc-9.2.0/gcta-1.93.2beta-yz57zzuencwoygoiry6q62ab23tdpd27/bin/gcta64 --grm {params.ip} --keep {input.singlef} --make-grm --out {params.op}"

rule plink2_pca:
    input:
        grmf=config_d["GWAS"]+"grm_{model}_{samplesize}/grm.grm.bin",
        grm_Nf=config_d["GWAS"]+"grm_{model}_{samplesize}/grm.grm.N.bin",
        grm_id=config_d["GWAS"]+"grm_{model}_{samplesize}/grm.grm.id"
    params:
        ip=config_d["GWAS"]+"grm_{model}_{samplesize}/grm",
        op=config_d["GWAS"]+"pca_{model}/{samplesize}_grm",
        npca=10
    output:
        valf=config_d["GWAS"]+"pca_{model}/{samplesize}_grm.eigenval",
        vecf=config_d["GWAS"]+"pca_{model}/{samplesize}_grm.eigenvec"
    threads: 12
    shell:
        "/gpfs/data/xhe-lab/software/spack/opt/spack/linux-rhel6-haswell/gcc-9.2.0/gcta-1.93.2beta-yz57zzuencwoygoiry6q62ab23tdpd27/bin/gcta64 --grm {params.ip} --out {params.op} --pca {params.npca} --threads {threads}"


# rule merge_plink_cut_vcf:
#     input:
#         famf=config_d["UKB_PED"]+"all_"+config_d["SAMPLEN"]+".fam",
#         bimf=config_d["UKB_PED"]+"all_"+config_d["SAMPLEN"]+".bim",
#         bedf=config_d["UKB_PED"]+"all_"+config_d["SAMPLEN"]+".bed",
#         grm_id=config_d["GWAS"]+"grm_cut/sub_{samplesize}.txt"
#     params:
#         in_pref=config_d["UKB_PED"]+"all",
#         out_pref=config_d["UKB_PED"]+"all_{samplesize}_ind"
#     output:
#         famf=config_d["UKB_PED"]+"all_{samplesize}_ind.fam",
#         bimf=config_d["UKB_PED"]+"all_{samplesize}_ind.bim",
#         bedf=config_d["UKB_PED"]+"all_{samplesize}_ind.bed"
#     shell:
#         "/gpfs/data/xhe-lab/software/spack/opt/spack/linux-rhel6-haswell/gcc-9.2.0/plink2-master-cy4i77vbnkwgzpc56eaghkq27shwgcam/bin/plink2 --bfile {params.in_pref} --keep {input.grm_id} --make-bed --out {params.out_pref}"

rule ref_fam:
  """Split the entire sample into non-overlapping sets of 'SAMPLEN'"""
    input:
        famf=config_d["UKB_SAMPLE"]
    params:
        samplesize=config_d["SAMPLEN"]
    output:
        sub_f = config_d["GWAS"]+"grm_cut/panel_"+config_d["SAMPLEN"]+".txt",
        grm_id=config_d["GWAS"]+"grm_cut/sub_"+config_d["SAMPLEN"]+".txt"
    script:
        "../scripts/sample_panel.R"

rule pull_map_p:
    input:
        bgenf=config_d["UKB_PED"]+"split_map/temppanel_{samplesize}_01_ind.bgen",
        samplef=config_d["UKB_PED"]+"panel/chr{chrom}_{samplesize}_01_ind.sample"
    params:
        op=config_d["UKB_PED"]+"split_map/temppanel_{samplesize}_chr{chrom}",
        chrom="{chrom}"
    output:
        famf=temp(config_d["UKB_PED"]+"split_map/temppanel_{samplesize}_chr{chrom}.fam"),
        bimf=temp(config_d["UKB_PED"]+"split_map/temppanel_{samplesize}_chr{chrom}.bim"),
        bedf=temp(config_d["UKB_PED"]+"split_map/temppanel_{samplesize}_chr{chrom}.bed")
    threads: 12
    shell:
        "/gpfs/data/xhe-lab/software/spack/opt/spack/linux-rhel6-haswell/gcc-9.2.0/plink2-master-cy4i77vbnkwgzpc56eaghkq27shwgcam/bin/plink2 --bgen {input.bgenf} ref-first --sample {input.samplef} --maf 0.01 --chr {params.chrom} --make-bed --out {params.op} --threads {threads}"

rule rpmap_p:
    input:
        famf=config_d["UKB_PED"]+"split_map/temppanel_{samplesize}_chr{chrom}.fam",
        bimf=config_d["UKB_PED"]+"split_map/temppanel_{samplesize}_chr{chrom}.bim",
        mapf=config_d["1KG"]+"hg19/GBR/GBR_recombination_map_plink_format_hg19_chr{chrom}.txt",
        bedf=config_d["UKB_PED"]+"split_map/temppanel_{samplesize}_chr{chrom}.bed"
    params:
        ip=config_d["UKB_PED"]+"split_map/temppanel_{samplesize}_chr{chrom}",
        op=config_d["UKB_PED"]+"split_map/panel_{samplesize}_chr{chrom}",
        chrom="{chrom}"
    output:
        famf=config_d["UKB_PED"]+"split_map/panel_{samplesize}_chr{chrom}.fam",
        bimf=config_d["UKB_PED"]+"split_map/panel_{samplesize}_chr{chrom}.bim",
        bedf=config_d["UKB_PED"]+"split_map/panel_{samplesize}_chr{chrom}.bed"
    shell:
        "cp {input.famf} {output.famf} && cp {input.bedf} {output.bedf} && plink --bim {input.bimf} --cm-map {input.mapf} {params.chrom} --make-just-bim --out {params.op}"


# rule sample_ref_vcf:
#     input:
#         famf=config_d["UKB_PED"]+"all.fam",
#         bimf=config_d["UKB_PED"]+"all.bim",
#         bedf=config_d["UKB_PED"]+"all.bed",
#         grm_id=config_d["GWAS"]+"grm_cut/panel_{samplesize}.txt"
#     params:
#         in_pref=config_d["UKB_PED"]+"all",
#         out_pref=config_d["UKB_PED"]+"panel_{samplesize}"
#     output:
#         famf=config_d["UKB_PED"]+"panel_{samplesize}.fam",
#         bimf=config_d["UKB_PED"]+"panel_{samplesize}.bim",
#         bedf=config_d["UKB_PED"]+"panel_{samplesize}.bed"
#     shell:
#         "/gpfs/data/xhe-lab/software/spack/opt/spack/linux-rhel6-haswell/gcc-9.2.0/plink2-master-cy4i77vbnkwgzpc56eaghkq27shwgcam/bin/plink2 --bfile {params.in_pref} --keep {input.grm_id} --make-bed --out {params.out_pref}"


# rule freqf_p:
#     input:
#         famf=config_d["UKB_PED"]+"panel_{samplesize}.fam",
#         bimf=config_d["UKB_PED"]+"panel_{samplesize}.bim",
#         bedf=config_d["UKB_PED"]+"panel_{samplesize}.bed"
#     params:
#         in_pref=config_d["UKB_PED"]+"panel_{samplesize}",
#         out_pref=config_d["UKB_PED"]+"panel_{samplesize}_freq"
#     output:
#         freqf=config_d["UKB_PED"]+"panel_{samplesize}_freq.frq",
#         logf=config_d["UKB_PED"]+"panel_{samplesize}_freq.log"
#     shell:
#         "/gpfs/data/xhe-lab/software/spack/opt/spack/linux-rhel6-haswell/gcc-9.2.0/plink2-master-cy4i77vbnkwgzpc56eaghkq27shwgcam/bin/plink2 --bfile {params.in_pref}  --freq --out {params.out_pref}"

rule freq_p:
    input:
        bgen=config_d["UKB_PED"]+"split_map/temppanel_{samplesize}_01_ind.bgen",
        samplef=config_d["UKB_PED"]+"panel/chr1_{samplesize}_01_ind.sample"
    params:
        out_pref=config_d["UKB_PED"]+"split_map/panel_{samplesize}_ind_freq"
    output:
        freqf=config_d["UKB_PED"]+"split_map/panel_{samplesize}_ind_freq.afreq",
        logf=config_d["UKB_PED"]+"split_map/panel_{samplesize}_ind_freq.log"
    shell:
        "/gpfs/data/xhe-lab/software/spack/opt/spack/linux-rhel6-haswell/gcc-9.2.0/plink2-master-cy4i77vbnkwgzpc56eaghkq27shwgcam/bin/plink2 --bgen {input.bgen} ref-first --sample {input.samplef} --freq --out {params.out_pref} --threads {threads}"





rule freqf_ind:
    input:
        famf=config_d["UKB_PED"]+"all_{samplesize}_ind.fam",
        bimf=config_d["UKB_PED"]+"all_{samplesize}_ind.bim",
        bedf=config_d["UKB_PED"]+"all_{samplesize}_ind.bed",
        var_f = config_d["UKB_PED"]+"sub/uniq_vars_"+config_d["SAMPLEN"]+".txt"
    params:
        in_pref = config_d["UKB_PED"]+"all_{samplesize}_ind",
        out_pref=config_d["UKB_PED"]+"all_{samplesize}_ind_freq"
    output:
        freqf=config_d["UKB_PED"]+"all_{samplesize}_ind_freq.afreq",
        logf=config_d["UKB_PED"]+"all_{samplesize}_ind_freq.log"
    threads: 1
    shell:
        "/gpfs/data/xhe-lab/software/spack/opt/spack/linux-rhel6-haswell/gcc-9.2.0/plink2-master-cy4i77vbnkwgzpc56eaghkq27shwgcam/bin/plink2 --bfile {params.in_pref} --extract {input.var_f} --freq --out {params.out_pref} --threads {threads}"        


rule causal_snps_polymatch:
    input:
        freqf=config_d["UKB_PED"]+"all_{samplesize}_ind_freq.afreq",
        freqpf=config_d["UKB_PED"]+"split_map/panel_{samplesize}_ind_freq.afreq"
    output:
        snp_list=config_d["MODELD"]+"model_{samplesize}/polym.txt"
    params:
        snp_freq=0.01
    script:
        "../scripts/filter_freq.R"



rule kgsubsnps:
    input:
        snp_list=config_d["MODELD"]+"model_{samplesize}/polym.txt",
        kgs=config_d["KGSD"]+"kgsubsnps.txt"
    output:
        snp_list=config_d["MODELD"]+"model_{samplesize}/kgsubsnps.txt"
    shell:
        """fgrep -w -f {input.kgs} {input.snp_list} > {output.snp_list}"""

rule sparse_causal_snps_polymatch:
    input:
        snp_list=config_d["MODELD"]+"model_{samplesize}/{model}.txt"
    output:
        snp_list=config_d["MODELD"]+"model_sp_{samplesize}/{model}.txt"
    params:
        sample_frac=0.5
    script:
        "../scripts/sample_frac.R"


rule really_sparse_causal_snps_polymatch:
    input:
        snp_list=config_d["MODELD"]+"model_{samplesize}/{model}.txt"
    output:
        snp_list=config_d["MODELD"]+"model_spp_{samplesize}/{model}.txt"
    params:
        sample_frac=0.125
    script:
        "../scripts/sample_frac.R"




rule really_sparse_causal_snps_polymatch_smallpoly:
    input:
        snp_list=config_d["MODELD"]+"model_spp_10000/polym.txt"
    output:
        snp_list=config_d["MODELD"]+"model_10000/smallpoly.txt"
    params:
        sample_frac=0.125
    shell:
        """cp {input} {output}"""

rule causal_snps_poly:
    input:
        freqf=config_d["UKB_PED"]+"all_{samplesize}_ind_freq.afreq"
    output:
        snp_list=config_d["MODELD"]+"model_{samplesize}/poly.txt"
    params:
        snp_freq=0.05
    script:
        "../scripts/filter_freq.R"

rule one_chrom:
    input:
        freqf=config_d["UKB_PED"]+"all_{samplesize}_ind_freq.afreq"
    output:
        snp_list=config_d["UKB_PED"]+"model_{samplesize}/onec.txt"
    params:
        snp_freq=0.05,
        chrom=19,
        max_p=70000
    script:
        "../scripts/filter_chrom.R"

    # rule poly_sim_pheno:
    #     input:
    #         snp_list=config_d["UKB_PED"]+"model_{samplesize}/{model}.txt",
    #         famf=config_d["UKB_PED"]+"all_{samplesize}_ind.fam",
    #         bimf=config_d["UKB_PED"]+"all_{samplesize}_ind.bim",
    #         bedf=config_d["UKB_PED"]+"all_{samplesize}_ind.bed"
    #     params:
    #         h2="{h2}",
    #         num_traits="{nt}",
    #         pref=config_d["GWAS"]+"pheno/{model}_{h2}_{nt}_{samplesize}",
    #         ip=config_d["UKB_PED"]+"all_{samplesize}_ind"
    #     output:
    #         phenof=config_d["GWAS"]+"pheno/{model}_{h2}_{nt}_{samplesize}.phen",
    #         true_b=config_d["GWAS"]+"pheno/{model}_{h2}_{nt}_{samplesize}.par"
    #     log:
    #         logf=config_d["GWAS"]+"pheno/{model}_{h2}_{nt}_{samplesize}.log"
    #     threads:
    #         12
    #     shell:
    #         "gcta64 --simu-qt --simu-hsq {params.h2} --bfile {params.ip} --out {params.pref} --simu-rep {params.num_traits} --simu-causal-loci {input.snp_list} --threads {threads}"



rule poly_sim_simu:
    input:
        snp_list=config_d["MODELD"]+"model_{samplesize}/{model}.txt",
        famf=config_d["UKB_PED"]+"all_{samplesize}_ind.fam",
        bimf=config_d["UKB_PED"]+"all_{samplesize}_ind.bim",
        bedf=config_d["UKB_PED"]+"all_{samplesize}_ind.bed"
    params:
        h2="{h2}",
        pref=config_d["GWAS"]+"pheno/{model}_{h2}_{trait}_10_{samplesize}",
        ip=config_d["UKB_PED"]+"all_{samplesize}_ind"
    output:
        phenof=config_d["GWAS"]+"pheno/{model}_{h2}_{trait}_10_{samplesize}.1.causals",
        true_b=config_d["GWAS"]+"pheno/{model}_{h2}_{trait}_10_{samplesize}.pheno"
    log:
        logf=config_d["GWAS"]+"pheno/{model}_{h2}_{trait}_10_{samplesize}.log"
    shell:
        "/gpfs/data/xhe-lab/software/spack/opt/spack/linux-rhel6-haswell/gcc-9.2.0/simu-0.9.4.1-v4noiyhxr5574otcocygl2l2jd7krwns/bin/simu --bfile {params.ip} --out {params.pref} --hsq {params.h2} --causal-variants {input.snp_list} --qt --gcta-sigma"




rule poly_sim_simu_sp:
    input:
        snp_list=config_d["MODELD"]+"model_sp_{samplesize}/{model}.txt",
        famf=config_d["UKB_PED"]+"all_{samplesize}_ind.fam",
        bimf=config_d["UKB_PED"]+"all_{samplesize}_ind.bim",
        bedf=config_d["UKB_PED"]+"all_{samplesize}_ind.bed"
    params:
        h2="{h2}",
        pref=config_d["GWAS"]+"pheno/{model}_{h2}_{trait}_05_{samplesize}",
        ip=config_d["UKB_PED"]+"all_{samplesize}_ind"
    output:
        phenof=config_d["GWAS"]+"pheno/{model}_{h2}_{trait}_05_{samplesize}.1.causals",
        true_b=config_d["GWAS"]+"pheno/{model}_{h2}_{trait}_05_{samplesize}.pheno"
    log:
        logf=config_d["GWAS"]+"pheno/{model}_{h2}_{trait}_05_{samplesize}.log"
    shell:
        "/gpfs/data/xhe-lab/software/spack/opt/spack/linux-rhel6-haswell/gcc-9.2.0/simu-0.9.4.1-v4noiyhxr5574otcocygl2l2jd7krwns/bin/simu --bfile {params.ip} --out {params.pref} --hsq {params.h2} --causal-variants {input.snp_list} --qt --gcta-sigma"


rule poly_sim_simu_spp:
    input:
        snp_list=config_d["MODELD"]+"model_spp_{samplesize}/{model}.txt",
        famf=config_d["UKB_PED"]+"all_{samplesize}_ind.fam",
        bimf=config_d["UKB_PED"]+"all_{samplesize}_ind.bim",
        bedf=config_d["UKB_PED"]+"all_{samplesize}_ind.bed"
    params:
        h2="{h2}",
        pref=config_d["GWAS"]+"pheno/{model}_{h2}_{trait}_01_{samplesize}",
        ip=config_d["UKB_PED"]+"all_{samplesize}_ind"
    output:
        phenof=config_d["GWAS"]+"pheno/{model}_{h2}_{trait}_01_{samplesize}.1.causals",
        true_b=config_d["GWAS"]+"pheno/{model}_{h2}_{trait}_01_{samplesize}.pheno"
    log:
        logf=config_d["GWAS"]+"pheno/{model}_{h2}_{trait}_01_{samplesize}.log"
    shell:
        "/gpfs/data/xhe-lab/software/spack/opt/spack/linux-rhel6-haswell/gcc-9.2.0/simu-0.9.4.1-v4noiyhxr5574otcocygl2l2jd7krwns/bin/simu --bfile {params.ip} --out {params.pref} --hsq {params.h2} --causal-variants {input.snp_list} --qt --gcta-sigma"


rule ind2plink:
    input:
        bgen=config_d["UKB_PED"]+"all_{samplesize}_01_ind.bgen",
        samplef=config_d["UKB_PED"]+"sub/chr1_{samplesize}_01_ind.sample",
        var_f = config_d["UKB_PED"]+"sub/uniq_vars_"+config_d["SAMPLEN"]+".txt"
    params:
        out_pref=config_d["UKB_PED"]+"all_{samplesize}_ind"
    output:
        famf=config_d["UKB_PED"]+"all_{samplesize}_ind.fam",
        bimf=config_d["UKB_PED"]+"all_{samplesize}_ind.bim",
        bedf=config_d["UKB_PED"]+"all_{samplesize}_ind.bed"
    shell:
        "/gpfs/data/xhe-lab/software/spack/opt/spack/linux-rhel6-haswell/gcc-9.2.0/plink2-master-cy4i77vbnkwgzpc56eaghkq27shwgcam/bin/plink2 --bgen {input.bgen} ref-first --extract {input.var_f} --sample {input.samplef} --make-bed --out {params.out_pref} --threads {threads}"



        # checkpoint plink_gwas_cov_o:
        #     input:
        #         famf=config_d["UKB_PED"]+"split_map/ind_{samplesize}_chr19.fam",
        #         bimf=config_d["UKB_PED"]+"split_map/ind_{samplesize}_chr19.bim",
        #         bedf=config_d["UKB_PED"]+"split_map/ind_{samplesize}_chr19.bed",
        #         phenof=config_d["GWAS"]+"pheno/onec_{h2}_{sp}_{samplesize}.phen",
        #         vecf=config_d["GWAS"]+"pca/{samplesize}_grm.eigenvec"
        #     params:
        #         ip=config_d["UKB_PED"]+"split_map/ind_{samplesize}_chr19",
        #         op=config_d["GWAS"]+"gwas_covar_ss/onec_{h2}_{sp}_10_{samplesize}/res",
        #     output:
        #         assoc_d=directory(config_d["GWAS"]+"gwas_covar_ss/onec_{h2}_{sp}_10_{samplesize}"),
        #         logf="onec_{h2}_{sp}_10_{samplesize}.log"
        #     threads:
        #         12
        #     shell:
        #         "mkdir -p {output.assoc_d} && plink2 --bfile {params.ip} --pheno {input.phenof} --glm hide-covar --maf 0.05 --covar {input.vecf} --threads {threads} --out {params.op} && mv {params.op}.log {output.logf}"


        # checkpoint plink_gwas_cov_p:
        #     input:
        #         bgen=config_d["UKB_PED"]+"all_{samplesize}_01_ind.bgen",
        #         samplef=config_d["UKB_PED"]+"chr1_{samplesize}_01_ind.sample",
        #         phenof=config_d["GWAS"]+"pheno/poly_{h2}_{sp}_{samplesize}.phen",
        #         vecf=config_d["GWAS"]+"pca/{samplesize}_grm.eigenvec"
        #     params:
        #         op=config_d["GWAS"]+"gwas_covar_ss/poly_{h2}_{sp}_10_{samplesize}/res"
        #     output:
        #         assoc_d=directory(config_d["GWAS"]+"gwas_covar_ss/poly_{h2}_{sp}_10_{samplesize}"),
        #         logf="poly_{h2}_{sp}_10_{samplesize}.log"
        #     threads:
        #         12
        #     shell:
        #         "mkdir -p {output.assoc_d} && plink2 --bgen {input.bgen} ref-first --sample {input.samplef} --pheno {input.phenof} --glm hide-covar --maf 0.05 --covar {input.vecf} --threads {threads} --out {params.op} && mv {params.op}.log {output.logf}"


rule gcta_sparsify_grm:
    input:
        grmf=config_d["GWAS"]+"grm_{model}_{samplesize}/grm.grm.bin",
        grm_id=config_d["GWAS"]+"grm_{model}_{samplesize}/grm.grm.id",
        grm_Nf=config_d["GWAS"]+"grm_{model}_{samplesize}/grm.grm.N.bin"
    output:
        idf=config_d["GWAS"]+"grm_sparse/grm_sparse_{samplesize}.grm.id",
        spf=config_d["GWAS"]+"grm_sparse/grm_sparse_{samplesize}.grm.sp",
        logf=config_d["GWAS"]+"grm_sparse/grm_sparse_{samplesize}.grm.log"
    params:
        ip=config_d["GWAS"]+"grm_{model}_{samplesize}/grm.grm",
        op=config_d["GWAS"]+"grm_sparse/grm_sparse_{samplesize}"
    shell:
        "/gpfs/data/xhe-lab/software/spack/opt/spack/linux-rhel6-haswell/gcc-9.2.0/gcta-1.93.2beta-yz57zzuencwoygoiry6q62ab23tdpd27/bin/gcta64 --grm {params.ip} --make-bK-sparse 0.05 --out {params.op}"


rule gcta_gwas_cov_p:
    input:
        famf=config_d["UKB_PED"]+"all_{samplesize}_ind.fam",
        bimf=config_d["UKB_PED"]+"all_{samplesize}_ind.bim",
        bedf=config_d["UKB_PED"]+"all_{samplesize}_ind.bed",
        phenof=config_d["GWAS"]+"pheno/{model}_{h2}_{trait}_{sp}_{samplesize}.pheno",
        vecf=config_d["GWAS"]+"pca_{model}/{samplesize}_grm.eigenvec"
    params:
        ip=config_d["UKB_PED"]+"all_{samplesize}_ind",
        op=config_d["GWAS"]+"gwas_covar_ss/{model}_{h2}_{trait}_{sp}_{samplesize}/res"
    output:
        assoc_d=config_d["GWAS"]+"gwas_covar_ss/{model}_{h2}_{trait}_{sp}_{samplesize}/res.fastGWA",
        logf=config_d["GWAS"] +  "gwas_covar_ss/{model}_{h2}_{trait}_{sp}_{samplesize}/res.log"
    threads:
        2
    shell:
        "/gpfs/data/xhe-lab/software/spack/opt/spack/linux-rhel6-haswell/gcc-9.2.0/gcta-1.93.2beta-yz57zzuencwoygoiry6q62ab23tdpd27/bin/gcta64 --bfile {params.ip} --fastGWA-lr --pheno {input.phenof} --qcovar {input.vecf} --threads {threads} --out {params.op}"

# rule sub_gwass_p:
#     input:
#         vecf=config_d["GWAS"]+"gwas_covar_ss/poly_{h2}_{nt}_{sp}_{samplesize}/res.fastGWA"
#     output:
#         tempf=config_d['GWAS'] +"ldsc_input/poly_{trait}_{nt}_{sp}_{h2}_{samplesize}.sumstats.gz"
#     script:
#         "../scripts/cols_cut.R"

rule sub_gwass_gcta:
    input:
        vecf=config_d["GWAS"]+"gwas_covar_ss/poly_{h2}_{trait}_{sp}_{samplesize}/res.fastGWA",
    output:
        tempf=config_d['GWAS'] +"ldsc_input/poly_{trait}_{sp}_{h2}_{samplesize}.sumstats.gz"
    script:
        "../scripts/cols_cut_gcta.R"

rule sub_gwass_gcta_pm:
    input:
        vecf=config_d["GWAS"]+"gwas_covar_ss/{model}_{h2}_{trait}_{sp}_{samplesize}/res.fastGWA",
    output:
        tempf=config_d['GWAS'] +"ldsc_input/{model}_{trait}_{sp}_{h2}_{samplesize}.sumstats.gz"
    script:
        "../scripts/cols_cut_gcta.R"


rule sub_gwass_gcta_h5:
    input:
        vecf=expand(config_d["GWASDB"]+"gwas_covar_ss/{{model}}_{{h2}}_{trait}_{{sp}}_{{samplesize}}/res.fastGWA",trait=ntr)
    params:
        h2=["{h2}"]*10,
        traits=ntr
    output:
        outf=config_d['GWAS'] +"gwas_h5/{model}_{sp}_{h2}_{samplesize}_sumstats.h5"
    script:
        "../scripts/cols_cut_gwas_h5.R"


rule sub_gwass_o:
    input:
        vecf=config_d["GWAS"]+"gwas_covar_ss/onec_{h2}_{trait}_{sp}_{samplesize}/res.PHENO{trait}.glm.linear"
    output:
        tempf=config_d['GWAS'] +"ldsc_input/onec_{trait}_{sp}_{h2}_{samplesize}.sumstats.gz"
    script:
        "../scripts/cols_cut.R"

rule plink_map:
    input:
        config_d["1KG"]+"hg19/GBR/GBR_recombination_map_hapmap_format_hg19_chr_{chrom}.txt"
    params:
        chrom="{chrom}"
    output:
        config_d["1KG"]+"hg19/GBR/GBR_recombination_map_plink_format_hg19_chr{chrom}.txt"
    shell:
        """cut -f 1 --complement {input} > {output}"""


rule pull_map:
    input:
        famf=config_d["UKB_PED"]+"all_{samplesize}_ind.fam",
        bimf=config_d["UKB_PED"]+"all_{samplesize}_ind.bim",
        bedf=config_d["UKB_PED"]+"all_{samplesize}_ind.bed",
        mapf=config_d["1KG"]+"hg19/GBR/GBR_recombination_map_plink_format_hg19_chr{chrom}.txt"
    params:
        ip=config_d["UKB_PED"]+"all_{samplesize}_ind",
        op=config_d["UKB_PED"]+"split_map/ind_{samplesize}_chr{chrom}",
        chrom="{chrom}"
    output:
        famf=config_d["UKB_PED"]+"split_map/ind_{samplesize}_chr{chrom}.fam",
        bimf=config_d["UKB_PED"]+"split_map/ind_{samplesize}_chr{chrom}.bim",
        bedf=config_d["UKB_PED"]+"split_map/ind_{samplesize}_chr{chrom}.bed"
    shell:
        "/gpfs/data/xhe-lab/software/spack/opt/spack/linux-rhel6-haswell/gcc-9.2.0/plink-master-aaxmha3khjivjpx5m5zyeg6zk6d6dj3o/bin/plink --bfile {params.ip} --chr {params.chrom} --cm-map {input.mapf} {params.chrom} --make-bed --out {params.op}"

rule ldshrink_ldo:
    input:
        famf=config_d["UKB_PED"]+"split_map/{source}_{samplesize}_chr{chrom}.fam",
        bimf=config_d["UKB_PED"]+"split_map/{source}_{samplesize}_chr{chrom}.bim",
        bedf=config_d["UKB_PED"]+"split_map/{source}_{samplesize}_chr{chrom}.bed",
        snp_list=config_d["UKB_PED"]+"model_{samplesize}/onec.txt"
    params:
        shrink="{shrink}"
    output:
        h5f=config_d['GWAS']+"ldo_{shrink}/{source}_{samplesize}_chr{chrom}.h5"
    script:
        "../scripts/ldshrink_ldo.R"



rule ldshrink_ld:
    input:
        famf=config_d["UKB_PED"]+"split_map/{source}_{samplesize}_chr{chrom}.fam",
        bimf=config_d["UKB_PED"]+"split_map/{source}_{samplesize}_chr{chrom}.bim",
        bedf=config_d["UKB_PED"]+"split_map/{source}_{samplesize}_chr{chrom}.bed",
        snp_list=config_d["MODELD"]+"model_{samplesize}/{model}.txt",
        sumststat_dbd=config_d['GWASDB'] +"rssp_ss/{model}_1_10_0.1_{samplesize}.sumstats"
    params:
        shrink="{shrink}",
        ldchunk="{scatteritem}",
        n_ldchunks=ldc
    output:
        h5f=config_d['LD_DIR']+"ld_{shrink}_{model}/{source}_{samplesize}_chr{chrom}_{scatteritem}.h5"
    script:
        "../scripts/ldshrink_ld.R"

rule cmp_baselineb_ldscores:
    """ Compute baseline ld scores for the single annotation at a single chromosome"""
    input:
        famf=config_d["UKB_PED"]+"split_map/{source}_{samplesize}_chr{chrom}.fam",
        bimf=config_d["UKB_PED"]+"split_map/{source}_{samplesize}_chr{chrom}.bim",
        bedf=config_d["UKB_PED"]+"split_map/{source}_{samplesize}_chr{chrom}.bed",
        snp_list=config_d["MODELD"]+"model_{samplesize}/{model}.txt"
    output:
        l2=(config_d['L2']+"ukb_baseline_{wind}/{model}/{source}.{samplesize}.{chrom}.l2.M"),
        l2M_50=(config_d['L2']+"ukb_baseline_{wind}/{model}/{source}.{samplesize}.{chrom}.l2.M_5_50"),
        l2gz=(config_d['L2']+"ukb_baseline_{wind}/{model}/{source}.{samplesize}.{chrom}.l2.ldscore.gz")
    params:
        plink=config_d["UKB_PED"]+"split_map/{source}_{samplesize}_chr{chrom}",
        odir=config_d['L2']+"ukb_baseline_{wind}/{model}/{source}.{samplesize}.{chrom}",
        wind="{wind}"
    container:
        "docker://ghcr.io/crerecombinase/ldsc"
    shell:
        config_d['LDSC']+"ldsc.py --l2 --bfile {params.plink}  --extract {input.snp_list} --ld-wind-cm {params.wind} --out {params.odir}"


rule baseline_ldsc:
    input:
        gwasf=config_d['GWAS'] +"ldsc_input/{model}_{trait}_{sp}_{h2}_{samplesize}.sumstats.gz",
        baselinef=expand(config_d['L2'] +"ukb_baseline_{{wind}}/{{model}}/{{source}}.{{samplesize}}.{chrom}.l2.ldscore.gz",chrom=range(1,23)),
        baseline_l2m=expand(config_d['L2'] +"ukb_baseline_{{wind}}/{{model}}/{{source}}.{{samplesize}}.{chrom}.l2.M",chrom=range(1,23)),
        baseline_l2m50=expand(config_d['L2'] +"ukb_baseline_{{wind}}/{{model}}/{{source}}.{{samplesize}}.{chrom}.l2.M_5_50",chrom=range(1,23))
    output:
        dataf="results/sim_ukb_{source}/{model}_{trait}_{sp}_{h2}_{samplesize}_{wind}.int.log"
    params:
        baseline=config_d['L2']+"ukb_baseline_{wind}/{model}/{source}.{samplesize}.",
        weights=config_d['L2']+"ukb_baseline_{wind}/{model}/{source}.{samplesize}.",#,config_d['WEIGHTS']+"weights.hm3_noMHC.",
        odir="results/sim_ukb_{source}/{model}_{trait}_{sp}_{h2}_{samplesize}_{wind}.int"
    container:
        "docker://ghcr.io/crerecombinase/ldsc"
    shell:
        config_d['LDSC']+"ldsc.py --h2 {input.gwasf} --ref-ld-chr {params.baseline} --w-ld-chr {params.weights} --out {params.odir}"



rule baseline_ldsc_noi:
    input:
        gwasf=config_d['GWAS'] +"ldsc_input/{model}_{trait}_{sp}_{h2}_{samplesize}.sumstats.gz",
        baselinef=expand(config_d['L2'] +"ukb_baseline_{{wind}}/{{model}}/{{source}}.{{samplesize}}.{chrom}.l2.ldscore.gz",chrom=range(1,23)),
        baseline_l2m=expand(config_d['L2'] +"ukb_baseline_{{wind}}/{{model}}/{{source}}.{{samplesize}}.{chrom}.l2.M",chrom=range(1,23)),
        baseline_l2m50=expand(config_d['L2'] +"ukb_baseline_{{wind}}/{{model}}/{{source}}.{{samplesize}}.{chrom}.l2.M_5_50",chrom=range(1,23))
    output:
        dataf="results/sim_ukb_{source}/{model}_{trait}_{sp}_{h2}_{samplesize}_{wind}.noint.log"
    params:
        baseline=config_d['L2']+"ukb_baseline_{wind}/{model}/{source}.{samplesize}.",
        weights=config_d['L2']+"ukb_baseline_{wind}/{model}/{source}.{samplesize}.",#,config_d['WEIGHTS']+"weights.hm3_noMHC.",
        odir="results/sim_ukb_{source}/{model}_{trait}_{sp}_{h2}_{samplesize}_{wind}.noint"
    container:
        "docker://ghcr.io/crerecombinase/ldsc"
    shell:
        config_d['LDSC']+"ldsc.py --h2 {input.gwasf} --ref-ld-chr {params.baseline} --w-ld-chr {params.weights} --no-intercept --out {params.odir}"

rule cat_grm_bin_h2:
    input:
        grm_bin=[config_d["GWAS"]+"split_grm_{model}_{samplesize}/grm.part_"+config_d["CHUNKN"]+"_{:02d}.grm.bin".format(i) for i in range(1,int(config_d["CHUNKN"])+1)]
    output:
        grm_bin=config_d["GWAS"]+"grm_{model}_{samplesize}/grm.grm.bin"
    shell:
        "cat {input.grm_bin} > {output.grm_bin}"

rule cat_grm_N_bin_h2:
    input:
        grm_bin=[config_d["GWAS"]+"split_grm_{model}_{samplesize}/grm.part_"+config_d["CHUNKN"]+"_{:02d}.grm.N.bin".format(i) for i in range(1,int(config_d["CHUNKN"])+1)]
    output:
        grm_bin=config_d["GWAS"]+"grm_{model}_{samplesize}/grm.grm.N.bin"
    shell:
        "cat {input.grm_bin} > {output.grm_bin}"


rule cat_grm_id_h2:
    input:
        grm_bin=[config_d["GWAS"]+"split_grm_{model}_{samplesize}/grm.part_"+config_d["CHUNKN"]+"_{:02d}.grm.id".format(i) for i in range(1,int(config_d["CHUNKN"])+1)]
    output:
        grm_id=config_d["GWAS"]+"grm_{model}_{samplesize}/grm.grm.id"
    shell:
        "cat {input.grm_bin} > {output.grm_id}"


rule gcta_h2:
    input:
        grmf=config_d["GWAS"]+"grm_{model}_{samplesize}/grm.grm.bin",
        grm_id=config_d["GWAS"]+"grm_{model}_{samplesize}/grm.grm.id",
        grm_Nf=config_d["GWAS"]+"grm_{model}_{samplesize}/grm.grm.N.bin",
        phenof=config_d["GWAS"]+"pheno/{model}_{h2}_{trait}_{sp}_{samplesize}.pheno",
        covarf=config_d["GWAS"]+"pca_{model}/{samplesize}_grm.eigenvec"
    params:
        grm_pref=config_d["GWAS"]+"grm_{model}_{samplesize}/grm",
        out_pref="results/sim_ukb_ind/{model}_{trait}_{sp}_{h2}_{samplesize}",
        trait="{trait}"
    threads: 9
    output:
        out_f="results/sim_ukb_ind/{model}_{trait}_{sp}_{h2}_{samplesize}.hsq",
        logf="results/sim_ukb_ind/{model}_{trait}_{sp}_{h2}_{samplesize}.log"
    shell:
        "/gpfs/data/xhe-lab/software/spack/opt/spack/linux-rhel6-haswell/gcc-9.2.0/gcta-1.93.2beta-yz57zzuencwoygoiry6q62ab23tdpd27/bin/gcta64 --reml --grm {params.grm_pref} --pheno {input.phenof} --qcovar {input.covarf} --out {params.out_pref} --thread-num {threads}"
